\documentclass[10pt,english,aspectratio=1609]{beamer}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}
\setlength{\parskip}{\smallskipamount}
\setlength{\parindent}{0pt}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\usepackage[natbibapa]{apacite}
\providecommand*{\code}[1]{\texttt{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
% \VignetteIndexEntry{rnw2pdf-slides-sweave}
% \VignetteEngine{Sweave}
% \VignetteBuilder{stationery::rnw2pdf}

\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{graphicx}
\newcommand\makebeamertitle{\frame{\maketitle}}%

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}

%PJ 20180213: where did following come from, why?
\newcommand{\vn}[1]{\mbox{{\it #1}}}
\newcommand{\vb}{\vspace{\baselineskip}}
\newcommand{\vh}{\vspace{.5\baselineskip}}
\newcommand{\vf}{\vspace{\fill}}
\newcommand{\splus}{\textsf{S-PLUS}}
\newcommand{\R}{\textsf{R}}
%PJ 20180213



%%paste in guidePreambleSweavel.tex
%%% From beamer slide:
\usepackage{Sweave}
%% 
%% This controls display of code chunks
\usepackage{ae,fancyvrb,relsize,listings}

\providecommand{\Sweavesize}{\normalsize}
\providecommand{\Rsize}{}
\renewcommand{\Rsize}{\normalsize}
\providecommand{\Routsize}{\scriptsize}

\providecommand{\Rcolor}{\color[rgb]{0.1, 0.1, 0.1}}
\providecommand{\Routcolor}{\color[rgb]{0.2, 0.2, 0.2}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.43, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.91}}
\providecommand{\Routbackground}{\color[gray]{0.935}}
% Can specify \color[gray]{1} for white background or just \color{white}

\lstdefinestyle{Rinput}{
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  basicstyle=\Rsize\Rcolor\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%,
  commentstyle=\Rcommentcolor\ttfamily,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1{==}{{=\,=}}2{--}{{-\,-}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
  backgroundcolor=\Rbackground,%
  numbers=left,%
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}%

% Other options of interest:
% frame=single,framerule=0.1pt,framesep=1pt,rulecolor=\color{blue},
% numbers=left,numberstyle=\tiny,stepnumber=1,numbersep=7pt,
% keywordstyle={\bf\Rcolor}

\lstdefinestyle{Routput}{fancyvrb=false,
  literate={~}{{$\sim$}}1{R^2}{{$R^{2}$}}2{^}{{$^{\scriptstyle\wedge}$}}1{R-squared}{{$R^{2}$}}2,%
  basicstyle=\Routcolor\Routsize\ttfamily,%
  backgroundcolor=\Routbackground,
  language=R,
  escapechar=`,
  fancyvrb=false,%
  tabsize=2,%
  breaklines=true,
  breakatwhitespace=true,%
  captionpos=b,%
  frame=single,%
  framerule=0.2pt,%
  framesep=1pt,%
  showstringspaces=false,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,%
  keywords=\bfseries,%
  keywordstyle=\color[rgb]{0, 0.5, 0.5},
  escapeinside={(*}{*)},
  literate={~}{{$\sim$}}1 {==}{{=\,=}}2,
  alsoother={$},
  alsoletter={.<-},%
  otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},
  numbers=left,
  %numberblanklines=false,%
  stepnumber=5,
  firstnumber=1,
  numberstyle={\tiny}
}

\renewenvironment{Schunk}{}{}
\renewenvironment{Sinput}{}{}
\let\Sinput\relax
\let\Scode\relax
\let\Soutput\relax
\lstnewenvironment{Sinput}{\lstset{style=Rinput}}{}
\lstnewenvironment{Scode}{\lstset{style=Rinput}}{}
\lstnewenvironment{Soutput}{\lstset{style=Routput}}{}

\lstset{tabsize=2, breaklines=true, style=Rinput, breakatwhitespace=true}

\fvset{listparameters={\setlength{\topsep}{0em}}}

\usepackage{xcolor}
\definecolor{light-gray}{gray}{0.90}
\usepackage{realboxes}
\providecommand*{\code}[1]{\texttt{#1}}
\renewcommand{\code}[1]{%
\Colorbox{light-gray}{#1}%
}%
%%end paste in guidePreambleSweavel.tex


%Some eager users of APA6 style want this
\usepackage[natbibapa]{apacite}
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}


\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
%\setbeamercolor*{structure}{bg=kublue,fg=kublue!90!black}
\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{upper separation line head}{fg=kublue}
%text color in table of contents
\setbeamercolor{section in toc}{fg=kublue!40!black}


\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 

%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}

\makeatother

\usepackage{babel}
\usepackage{listings}
\renewcommand{\lstlistingname}{\inputencoding{latin9}Listing}

\begin{document}
% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/t,split=FALSE,ae=F,height=4.5,width=7}

<<Roptions, echo=FALSE, include=FALSE, results=hide>>=
opts.orig <- options()
options(width=70, prompt = " ", continue = "  ")
options(useFancyQuotes = FALSE)
set.seed(12345)
par.orig <- par(no.readonly=TRUE) 
pjmar <- c(4.1, 4.1, 1.5, 2.1)
par(mar=pjmar, ps=11)
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
pdf.options(onefile=F,family="Times",pointsize=12)
if(!file.exists("tmpout")) dir.create("tmpout", showWarnings=F)
@

<<texcopy, include=FALSE, echo=FALSE, results=hide>>=
library(stationery)
## If theme directory does not have required logos, retrieve them. 
logos <- c(logo = "logo.pdf",
            logomini = "logomini.png")
getFiles(logos, pkg = "stationery")
@

\title[beamer]{Instructions for rmd2pdf-slides-sweave}

\author{Paul Johnson\inst{1}}

\institute[K.U.]{\inst{1}Center for Research Methods and Data Analysis }

\date{2018}

\makebeamertitle
\logo{\includegraphics[width=5mm]{theme/logomini}}

\AtBeginSection[]{
  \frame<beamer>{ 
    \frametitle{Outline}
    \tableofcontents[currentsection] 
  }
}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Outline}

\tableofcontents{}

\end{frame}

\global\long\def\vb#1{\bm{\mathrm{#1}}}

\section{Launch with stationery}

\begin{frame}[allowframebreaks, containsverbatim]
\frametitle{Create a Skeleton}

Create a skeleton (template) document by opening R and running

<<eval=F>>=
library(stationery)
initWriteup("rnw2pdf-slides-sweave")
@

That will create a folder ``\code{rnw2pdf-slides-sweave}'' (unless
you request otherwise by setting the \code{dir} argument). 

\end{frame}

\begin{frame}[allowframebreaks, containsverbatim]
\frametitle{Edit our skeleton}
\begin{itemize}
\item Copy skeleton.lyx (or skeleton.Rnw, your choice) to a new file name,
one which you will edit.
\item Make small changes, try to compile.
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{About the theme folder}
\begin{itemize}
\item Theme files are copied into the theme directory when this document
is compiled the first time.
\item After that, the author can revise those theme files to suit her taste. 
\item The document will not erase those files and re-insert our defaults.
\item We DO expect everybody will supply their own ``logo.pdf'' and ``logomini.pdf''
files, for example.
\end{itemize}
\end{frame}

\section{Our Design Plan}

\begin{frame}[allowframebreaks, containsverbatim]
\frametitle{Elegant yet helpful; artistic yet austere; delicious yet light}
\begin{itemize}
\item The theme settings are in the preamble. No external dependency on
a theme file needed.
\item Once we saw how simple a Beamer theme is–just a designation theme
types for the outer edges and inner content–we knew what to do: \textbf{CUSTOMIZE!}
\item Our preferred theme uses the \emph{right} shades of blue along with:
\begin{exampleblock}{Key elements in our theme}

\inputencoding{latin9}\begin{lstlisting}
\useoutertheme{infolines}
\useinnertheme{rounded}
\setbeamertemplate{blocks}[default]
\end{lstlisting}
\inputencoding{utf8}\end{exampleblock}
\item The outer theme is a conservative use of screen real estate (narrow
top boxes)
\item The inner theme gives the jazzy 3-D bullets
\item We don't want the rounded alert boxes, however, so we have blocks
set to the default box style.
\item As the Beamer documentation makes clear, there are just a few of these
outer and inner themes that can be ``mixed-and-matched'' to suit
the author's taste.
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{This is a default style we selected}
\begin{itemize}
\item This document is formatted to create 16:9 resolution slides. 
\item To alter that, change document setting options.
\item Citations use natbib with apacite. To check, we'll cite R (\citealp{RCore})
and the single most influential book in modern applied statistics
\citep{mccullagh_nelder_1989}
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{About frame options}

In the frames used in these reports, the environment is initiated
in one of 3 ways:
\begin{enumerate}
\item No options:

\inputencoding{latin9}\begin{lstlisting}
\begin{frame}
\end{lstlisting}
\inputencoding{utf8}\item Allow for long output to spill onto successive slides:

\inputencoding{latin9}\begin{lstlisting}
\begin{frame}[allowframebreaks]
\end{lstlisting}
\inputencoding{utf8}
In case you want to force a break in a long slide, use LaTeX \code{\framebreak}.
\item Allow for inclusion of R output or other LaTeX listings objects

\inputencoding{latin9}\begin{lstlisting}[basicstyle={\small\ttfamily},tabsize=1]
\begin{frame}[allowframebreaks, containsverbatim]
\end{lstlisting}
\inputencoding{utf8}
\end{enumerate}
\begin{alertblock}{containsverbatim is necessary}

Any time your slide includes R output, any verbatim markup, or a listings
box, the compile will fail if you do not declare the frame with ``containsverbatim''. 

\end{alertblock}
\end{frame}

\begin{frame}[allowframebreaks]
\frametitle{Slide with "allowframebreaks" can spill onto several slides}

Some filler that causes the spill onto another slide. Note confusing
equation labels
\begin{itemize}
\item onefile

\begin{equation}
1\times1\label{eq:one}
\end{equation}
\item two

\[
2\times1
\]
\item three

\begin{equation}
3\times1\label{eq:three}
\end{equation}
\item four 

\[
4\times1
\]
\item five

\[
5\times1
\]
\item six

\[
6\times1
\]
\item seven

\[
7\times1
\]
\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks,containsverbatim]
\frametitle{Using "allowframebreaks" and "containsverbatim"}
\begin{itemize}
\item I usually use both \textquotedbl{}allowframebreaks\textquotedbl{}
and \textquotedbl{}containsverbatim\textquotedbl{} on most slides.
\item ``allowframebreaks'' is now harmless. It has no effect in current
configuration unless there are actually 2 or more slides worth of
material
\item However, containsverbatim is not harmless. It will break use of beamer
overlay features, or one-at-a-time revelation of enumerated lists.
\end{itemize}
\end{frame}

\section{R Code chunks}

\subsection{Displaying R code and output}

\begin{frame}[containsverbatim]
\frametitle{Listings class is used to display code chunks}
\begin{itemize}
\item R code chunks are displayed with LaTeX listings, a highly customizable
class for code displays. 
\item We use 2 types of listings:
\begin{itemize}
\item \textbf{Rinput}: for all listings boxes and for R code 
\item \textbf{Routput}: output listings use smaller font
\end{itemize}
\item Because slides are often ``guides'', the listings style is the same
as a CRMDA guide document.
\end{itemize}
\framebreak
\begin{itemize}
\item The author can adjust these by editing the file ``\code{theme/guidePreambleSweavel.tex}'',
or
\item replacing the theme file with our alternative ``\code{theme/reportPreambleSweavel.tex}''.
\item by adjusting the properties of the individual listings items. In the
previous slide, we adjusted the listings options for a smaller font
in the third item, or
\item I (often) fiddle the line-numbering settings in that tex file to suit
my taste.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{line numbers on code chunks}
\begin{itemize}
\item Sometimes it appears that there are line numbers with code chunks.
\item Sometimes they are invisible because they are outside the left margin
\item The margins are adjustable when this happens, see preamble for example.
Don't use LyX menus, use the preamble to edit.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Code chunks suggestions for authors}
\begin{itemize}
\item Please name all chunks. 
\begin{itemize}
\item This makes bug-shooting much easier
\item Here is a chunk named \code{dat10}. The default settings of the options
\code{include} and \code{echo} are \code{TRUE}, so we set them
as FALSE for variety.

\inputencoding{latin9}\begin{lstlisting}
< <data10, include=FALSE, echo=FALSE>>=
x <- rnorm(100)
mean(x)
@
\end{lstlisting}
\inputencoding{utf8}\end{itemize}
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Styling of non-chunk code commentary}
\begin{itemize}
\item The listings environment can be used in ``containsverbatim'' chunks.
The styling will, by default, be same as R input.
\item If instead author desires style of Routput, the listings argument
``style=Routput'' can be specified. 
\item Inline comments will declared with the code environment will have
a gray box similar to the Rinput box for chunks.
\begin{itemize}
\item Examples, should have same appearance in PDF:
\begin{itemize}
\item LyX text menu\code{lm(y \textasciitilde{} x, data = dat)}. 
\item Raw Latex \texttt{\code{lm(y ~ x, data = dat}}
\end{itemize}
\end{itemize}
\end{itemize}
\end{frame}

\subsection{More Frame Options}

\begin{frame}[allowframebreaks,containsverbatim]
\frametitle{Both "allowframebreaks" and "containsverbatim" accomodate large R output}

<<reg10>>=
example(lm)
@

\end{frame}

\begin{frame}[allowframebreaks,containsverbatim]
\frametitle{2 Columns}
\begin{columns}[t]

\column{6cm}
\begin{itemize}
\item Total width of page is 12cm
\item Author can set each column at 6cm
\end{itemize}
\begin{block}{A Block Can be Nested}

This is inside the content area of the block

\end{block}

\column{6cm}
\begin{itemize}
\item In LyX, I find it tricky to use the GUI tool for slides (in general)
\item Columns often seem difficult, but I still use GUI because I don't
want to write out lots of code
\item But I do manually write Frames in LyX because I don't enjoy the GUI
style these days.
\end{itemize}
\end{columns}

\end{frame}

\begin{frame}[allowframebreaks]
\frametitle{References}

\bibliographystyle{apalike2}
\bibliography{theme/R}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Session}

<<sess10>>=
sessionInfo()
@

<<RoptionsRestore, echo=F, include=F>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
par(par.orig)
@

\end{frame}
\end{document}
