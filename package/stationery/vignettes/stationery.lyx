#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\begin_preamble
% \VignetteIndexEntry{stationery}
% \VignetteEngine{Sweave}
% \VignetteBuilder{stationery::rnw2pdf}

\usepackage[includehead,includefoot,
lmargin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

\usepackage{dcolumn}
\usepackage{booktabs}


\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
\input{theme/reportPreambleSweavel.tex}
\end_preamble
\use_default_options false
\begin_modules
logicalmkup
sweave
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\branch R
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
reportsetup{%
\end_layout

\begin_layout Plain Layout

  author={
\end_layout

\begin_layout Plain Layout

    lastname=Johnson,
\end_layout

\begin_layout Plain Layout

    firstname=Paul E., 
\end_layout

\begin_layout Plain Layout

    affiliation=Director{,} CRMDA,
\end_layout

\begin_layout Plain Layout

    email=pauljohn@ku.edu},
\end_layout

\begin_layout Plain Layout

  title={stationery Package Overview: Guides, Slides, and Reports},
\end_layout

\begin_layout Plain Layout

  rightlogo={theme/logo.pdf},
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
reporthdr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=FALSE,echo=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Please leave this code: In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t, split=FALSE, ae=FALSE, height=5, width=6}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<texcopy, include=FALSE,echo=FALSE,results=hide>>=
\end_layout

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

## If theme directory does not have required images or TeX files
\end_layout

\begin_layout Plain Layout

## we need to retrieve them and put them in "theme" directory.
 
\end_layout

\begin_layout Plain Layout

logos <- c(logoright = "logo.pdf", "addressFooter.tex", "preambleFooter.tex")
\end_layout

\begin_layout Plain Layout

texfiles <- c("reportPreambleHeader.tex", 
\end_layout

\begin_layout Plain Layout

              "reportPreambleSweavel.tex",
\end_layout

\begin_layout Plain Layout

              "R.bib")
\end_layout

\begin_layout Plain Layout

getFiles(logos, pkg = "stationery")
\end_layout

\begin_layout Plain Layout

getFiles(texfiles, pkg = "stationery")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Please leave this chunk
\end_layout

\begin_layout Plain Layout

<<Roptions, echo=F, include=F, results=hide>>=
\end_layout

\begin_layout Plain Layout

if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly=TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(5.1, 5.1, 1.5, 2.1) 
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=10)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=FALSE, family="Times", pointsize=10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
\noindent
The stationery package offers working examples for preparation of 
\begin_inset Quotes eld
\end_inset

reproducible research
\begin_inset Quotes erd
\end_inset

 documents.
 It demonstrates how one can create and customize the style of both markdown
 and LaTeX documents.
 These formats utilize R's 
\begin_inset Quotes eld
\end_inset

code chunk
\begin_inset Quotes erd
\end_inset

 processing technology, so that code that creates figures and tables can
 be embedded into the document itself.
 The package includes 8 document templates.
 The vignettes that accompany the package provide elementary explanations
 of the formats and how they differ in practice.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Researchers who have been using word processors to prepare their research
 articles, copying and pasting graphs and tables from statistical output
 from one format to another, are understandably bewildered by recent talk
 about 
\emph on
reproducible research documents
\emph default
 (
\begin_inset CommandInset citation
LatexCommand citealp
key "leisch2002,xiedynamic,stodden_2013,xiebookdown"

\end_inset

).
 The suggested change in the academic workflow could not be more jarring.
 The majority response from most professors seems to echo the exclamation
 of one administrator at my university: 
\begin_inset Quotes eld
\end_inset

I have no idea what that means!
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
Authors who have been using LaTeX to prepare documents will find it less
 difficult to understand the dramatic change that is underway.
 For others, the transition is jarring for several reasons.
 First, the software for document authoring is being replaced.
 Second, the format in which documents are stored and revised is replaced.
 Third, the methods of statistical analysis that used to seem separate from
 authoring (SAS, SPSS, etc) are now supposed to be integrated with authoring.
 
\end_layout

\begin_layout Standard
In the 
\emph on
new way
\emph default
 of doing things, we try to avoid typing tables or pasting in graphs.
 We want the analysis software to prepare article-ready tables and graphs
 that can be incorporated into the generation of a final report.
 In the ideal case, an entire article, lecture, or book can be generated
 in one single execution that conducts analysis, saves graphics, and assembles
 them together in a single output document.
 This is roughly along the lines of the 
\begin_inset Quotes eld
\end_inset

literate programming
\begin_inset Quotes erd
\end_inset

 movement started by computer scientist Donald Knuth (
\begin_inset CommandInset citation
LatexCommand citeyear
key "knuth1984,knuth1989"

\end_inset

), who also created the TeX document preparation system (1984), an accomplishmen
t so massive that its impact on academic research can scarcely be comprehended.
 The statistical program R 
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"

\end_inset

 built its documentation framework on the literate programming philosophy,
 integrating Knuth's concepts of 
\begin_inset Quotes eld
\end_inset

weaving
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

tangling
\begin_inset Quotes erd
\end_inset

 to produce documents and extract code files 
\begin_inset CommandInset citation
LatexCommand citep
key "leisch2002"

\end_inset

.
 
\end_layout

\begin_layout Standard
Once we understand that statistical code is to be embedded in a research
 report, then comes a series of rude shocks.
 The first shock is that 
\emph on
there are several competing formats for doing this kind of work
\emph default
.
 Our original work on reproducible documents was done with LaTeX in mind.
 But we don't expect everybody will become LaTeX experts.
 We also provide versions for LyX (http://www.lyx.org), a graphical user interface
 for LaTeX that works like a word processor.
 We also offer the markdown document format.
 Proponents claim that markdown is simpler and more human-readable.
 The leading voice has been John Gruber, whose Daring Fireball website (https://
daringfireball.net/projects/markdown) explained the idea and offered the
 first working set of guidelines for markdown documents.
 John MacFarlane's ambitious software program 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pandoc
\end_layout

\end_inset

 (https://johnmacfarlane.net/pandoc) plays a key role, it converts markdown
 into other output formats.
 
\end_layout

\begin_layout Standard
The other shock coming for new users is that the output format is difficult
 to adjust.
 The stationery package is intended to ease the frustration.
 It offers working examples (and instructions) for several of the leading
 methods.
 Each document includes a customized style template that points the path
 forward for authors.
 
\end_layout

\begin_layout Standard
Some terminology is important in this discussion, so we highlight the following.
 
\end_layout

\begin_layout Description

\series bold
front
\begin_inset space ~
\end_inset

end: 
\series default
the format in which a document is prepared.
 We consider markdown and LaTeX-based formats.
 Markdown files are saved with a suffix .Rmd, while the LaTeX versions are
 often saved as .Rnw.
 
\end_layout

\begin_layout Description

\series bold
back
\begin_inset space ~
\end_inset

end: 
\series default
the delivered format.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In this context, it is a bit vague to say 
\emph on
front end
\emph default
 because each document is converted through several formats in the compilation
 process.
 Any intermediate format that precedes another might be referred edited
 directly and treated as a front end by an author.
\end_layout

\end_inset

 The back ends considered here are Adobe portable document format (PDF)
 and hypertext markup language (HTML).
 
\end_layout

\begin_layout Description
code
\begin_inset space ~
\end_inset

chunk: A segment of R code that is embedded in a LaTeX or markdown document.
\end_layout

\begin_layout Description
style: the description of the back end's format.
 Our examples compare pedagogical guides, formal reports, and slides as
 styles.
\end_layout

\begin_layout Description
skeleton: a minimum working example that an author can revise into an essay.
\end_layout

\begin_layout Section
What Do You Get with stationery?
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
stationery
\end_layout

\end_inset

 package includes example files and style files provided for eight types
 of documents (see Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Document-Types"

\end_inset

).
 The 
\begin_inset Quotes eld
\end_inset

mixing and matching
\begin_inset Quotes erd
\end_inset

 of various front ends, back ends, and document styles produces the various
 document styles that are discussed.
 We hope that authors who are accustomed to writing on stationery, with
 a pleasant header and footer, will find satisfactory results.
 Each document style includes style files that can be revised to suit the
 author's needs.
 While it is not easy to create these style templates, we believe it will
 be easier for others succeed if they start from the example we offer.
 
\end_layout

\begin_layout Standard
The package also provides functions to initialize skeleton documents and
 convert them to a desired back end.
 
\end_layout

\begin_layout Standard
Finally, there are vignettes, one of which is the present document, which
 serves as a package overview.
 In addition, we have vignettes named
\end_layout

\begin_layout Enumerate
Code Chunks: compares Sweave and knitr style code chunks.
\end_layout

\begin_layout Enumerate
Rmarkdown: explores key elements in the newest front end document framework.
\end_layout

\begin_layout Enumerate
HTML Special Features: a tour of the promise and peril of using HTML as
 a back end for markdown documents.
\end_layout

\begin_layout Subsection*
\begin_inset Flex Code
status open

\begin_layout Plain Layout
stationery
\end_layout

\end_inset

 package document templates
\end_layout

\begin_layout Standard
In Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Document-Types"

\end_inset

, readers will note that the document formats have three-part names like
 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
rnw2pdf-guide-sweave
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 The first part of the name has the format 
\emph on
frontend
\emph default
2
\emph on
backend.

\emph default
 By mixing and matching the front ends and the backends, we have identifiers
 like 
\begin_inset Quotes eld
\end_inset

rnw2pdf
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

rmd2pdf
\begin_inset Quotes erd
\end_inset

.
 The middle part of the format label is either 
\begin_inset Quotes eld
\end_inset

guide
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

report
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

slides
\begin_inset Quotes erd
\end_inset

.
 For document types that can be used with either Sweave or knitr, it is
 necessary to add a third part in the name (R markdown documents cannot
 use the Sweave engine).
 
\end_layout

\begin_layout Standard
The process of converting a reproducible document from front end to back
 end is referred to as compiling a document.
 It is always a multi-step process which we illustrate in Figure X.
 If one is editing a file in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
LyX
\end_layout

\end_inset

, the first step in the compilation process will be to export the document
 to an Rnw file.
 Putting that detail aside, suppose we start with either an .Rnw or an .Rmd
 file.
 These have code chunks that need to be converted from R input into R output.
 That conversion is referred to as 
\begin_inset Quotes eld
\end_inset

weaving
\begin_inset Quotes erd
\end_inset

, in the tradition of Knuth's literate document preparation framework (???),
 but the particular functions that do the weaving have different names.
 The base R framework refers to this as 
\begin_inset Quotes eld
\end_inset

Sweaving
\begin_inset Quotes erd
\end_inset

 because the function that does the work was called 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Sweave
\end_layout

\end_inset

, while the newer 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
knitr
\end_layout

\end_inset

 package refers to the chunk-conversion process as 
\begin_inset Quotes eld
\end_inset

knitting
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Between the front end and the back end we have intermediate files that are
 created (and just as quickly erased) while the final document is being
 produced.
 LaTeX authors are used to editing .tex files, but .tex is usually an intermediate
 form in this work.
 When code chunks are present, a LaTeX document is usually given the suffix
 .Rnw, which is then converted into a .tex file by the chunk converter.
 Once that intermediate LaTeX document is created, it must be compiled into
 a back end format (usually by pdflatex or similar programs).
 An R markdown document, with suffix .Rmd, can be written with various back
 ends in mind (we concentrate on PDF and HTML backends, but pandoc can be
 used to convert markdown other formats, like MS Word.) As we emphasize below,
 the special features intended for one document format are generally incompatibl
e with the other back ends, so it is not usually feasible to write one document
 intended for various back ends.
 The Rmd file's chunks are converted to code and output by the knitting
 process.
 This generates an intermediate document in the markdown (.md) format.
 The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pandoc
\end_layout

\end_inset

 program is the used to convert the markdown document either to a final
 form, or an intermediate LaTeX (.tex) format.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Document Types in Stationery
\begin_inset CommandInset label
LatexCommand label
name "tab:Document-Types"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="1in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Formats
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Frontend
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Backend
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Style
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code Chunk Engine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rmd2html-guide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Markdown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTML
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Guide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
knitr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rmd2pdf-guide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Markdown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Guide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
knitr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
 rmd2pdf-report
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Markdown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Report
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
knitr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rnw2pdf-guide-knit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Markdown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Guide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
knitr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rnw2pdf-guide-sweave
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LaTeX/LyX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Guide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sweave
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rnw2pdf-report-knit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LaTeX/LyX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Report
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
knitr
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rnw2pdf-report-sweave
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LaTeX/LyX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Report
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sweave
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rnw2pdf-slides-sweave
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LaTeX/LyX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PDF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Slides
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sweave
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Guides versus reports
\end_layout

\begin_layout Standard
A 
\series bold
guide
\series default
 is intended for students or other learners.
 A guide will generally include code and output excerpts.
 Preferably, the code examples will have line numbers and syntax highlighting.
 In most cases, a guide format is not format suitable for reports to clients
 or for journal articles.
 Our guide formats are currently used for CRMDA documents.
\end_layout

\begin_layout Standard
A 
\series bold
report
\series default
 is a more formal document.
 It is more is suitable for a journal article or a report.
 A report has less (maybe no) code and almost never will it include "raw
 output" from a computer program.
 A report includes closer-to-publishable tables and figures.
 Our style has a title, author information, and a graphic for the organizational
 logo.
 On page 1, we have contact information, in the style of a stationary footer.
 The style for "guide" documents is not well settled.
 It is one of the problems on our immediate agenda.
\end_layout

\begin_layout Standard
The slide format we offer is based on LaTeX Beamer () slide format using
 a customized theme that we prefer.
 So far, the only code engine for which we have working examples in Sweave.
 We have experimented with many slide producing strategies using markdown
 code and none of them have been completely dependable, so we set that aside
 for the moment.
\end_layout

\begin_layout Subsection*
There are too many settings
\end_layout

\begin_layout Standard
One of the first problems that we run into is that there is a huge number
 of possible settings.
 This is not so much of a problem with Rnw files using Sweave, but the knitr
 alternative as a slew of additional options that affect the appearance
 of code chunks in the final output.
 
\end_layout

\begin_layout Standard
When we change the document format to R markdown, we inherit a slew of additiona
l settings to keep in mind.
 Many settings are embedded in the documents themselves, while some can
 be supplied along with the commands that compile the documents.
 The document formats provided with the package have settings that meet
 out needs, but authors can adjust them to achieve their own purposes.
 
\end_layout

\begin_layout Standard
COMMENTARY here
\end_layout

\begin_layout Standard
The compiler functions have options like 
\begin_inset Quotes eld
\end_inset

quiet = FALSE
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

verbose = TRUE
\begin_inset Quotes erd
\end_inset

, or 
\begin_inset Quotes eld
\end_inset

clean = FALSE
\begin_inset Quotes erd
\end_inset

, which can be specified 
\end_layout

\begin_layout Standard
The `stationery` package has settings that work for our documents.
 Our compiler scripts leave open the possibility that users can supply additiona
l command line arguments, arguments that have the same names as our R functions
 rmd2pdf, rmd2html, rnw2pdf, and rnw2html.
 Still, the number of options that can govern the production of the document,
 its transition through several formats, is, well, stupefying.
\end_layout

\begin_layout Standard
Consider a document that is written with R markdown.
 In order to achieve success, the document must undergo these transitions
\end_layout

\begin_layout Standard
The transition from `utf8.md` to LaTeX, considered in isolation, is nearly
 overwhelming.
 When we compile a markdown document named 
\begin_inset Quotes eld
\end_inset

crmda.Rmd
\begin_inset Quotes erd
\end_inset

, we can investigate the details and the `pandoc` command is the following
 elaborate request.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

$ /usr/bin/pandoc +RTS -K512m -RTS crmda.utf8.md 
\end_layout

\begin_layout Plain Layout

--to latex --from markdown+autolink_bare_uris+ascii_identifiers +tex_math_single
_backslash --table-of-contents --toc-depth 2 --template theme/report-boilerplate.
tex --highlight-style haddock --latex-engine 
\end_layout

\begin_layout Plain Layout

pdflatex --listings
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is a little bit difficult to design a template that both allows some
 user customization while maintaining a consistent look and feel.
 We believe the default configuration in our document packages should "just
 work".
 However, if specialized adjustment is necessary, we have not made this
 too difficult for most authors with a 
\begin_inset Quotes eld
\end_inset

can do
\begin_inset Quotes erd
\end_inset

 attitude.
\end_layout

\begin_layout Section
Usage overview 
\end_layout

\begin_layout Subsection
Create a starter document
\end_layout

\begin_layout Standard
The stationery package includes a function called 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
initWriteup
\end_layout

\end_inset

.
 We must specify one of the 8 document types.
 Here we will illustrate the process of initiating a guide document that
 is to be prepared with Rmarkdown and will have the HTML backend.
 Start R in a folder where you would like to create a write-up and run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

initWriteup(type = "rmd2pdf-report")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This creates a folder named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf-report
\end_layout

\end_inset

.
 It will be created in the R current working directory (because the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
dir
\end_layout

\end_inset

 parameter was not specified).
 Within the folder 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf-report
\end_layout

\end_inset

, one should find 
\end_layout

\begin_layout Enumerate
a skeleton template, skeleton.Rmd (which the author should rename and edit),
 
\end_layout

\begin_layout Enumerate
an instructional guide, instructions.Rmd,
\end_layout

\begin_layout Enumerate
a compiler script, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf.sh
\end_layout

\end_inset

,
\end_layout

\begin_layout Enumerate
a directory named 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
theme
\end_layout

\end_inset

,
\end_layout

\begin_layout Standard
The output will tell you where the directory ended up, say:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{Soutput}
\end_layout

\begin_layout Plain Layout

[1] "/home/pauljohn/wherever_you_say/rmd2pdf-report"
\end_layout

\begin_layout Plain Layout


\backslash
end{Soutput}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most users will rename the file 
\begin_inset Quotes eld
\end_inset

skeleton.Rmd
\begin_inset Quotes erd
\end_inset

 and the subfolder "rmd2pdf-report" to something more relevant to a project.
 Here we might use the name 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
crmda.Rmd
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
There are other ways to create a document.
 We have formatted the folder structure of the package in a way that is
 consistent with the template format required by Rstudio (as specified by
 the package 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmarkdown
\end_layout

\end_inset

).
 The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmarkdown
\end_layout

\end_inset

 function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
draft()
\end_layout

\end_inset

 performs exactly the same purpose as our function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
initWriteup
\end_layout

\end_inset

.
 One could run
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

library(rmarkdown)
\end_layout

\begin_layout Plain Layout

draft("crmda.Rmd", template = "rmd2pdf-report", package = "stationery", create_di
r = FALSE)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For our markdown-based formats (sadly, not for the LaTeX based formats),
 the Rstudio graphical interface will work as well.
 A user can open the File menu, choose New File -> R Markdown -> From Template.
 The formats 
\begin_inset Quotes eld
\end_inset

rmd2html guide
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

rmd2pdf report
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

rmd2pdf guide
\begin_inset Quotes erd
\end_inset

 should be available.
 
\end_layout

\begin_layout Subsection
How to Compile a Document
\end_layout

\begin_layout Standard
Users should try to compile our document before changing it.
 After making revisions, it is suggested to try to compile the document
 as often as it is practical to do so.
\end_layout

\begin_layout Standard
The file can be compiled in several ways.
 
\end_layout

\begin_layout Standard
1.
 Open an R session and use the function `rmd2pdf()` in the stationery package.
 I'll compile my file `crmda.Rmd`.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<usage100, eval=F>>=
\end_layout

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

rmd2pdf("crmda.Rmd")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf
\end_layout

\end_inset

 allows a great many possible parameters.
 It does so because it has to orchestrate a two part process.
 First, a document format object must be created with the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pdf_document
\end_layout

\end_inset

 in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmarkdown
\end_layout

\end_inset

 package (or, for HTML output, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
html_document
\end_layout

\end_inset

).
 After that, one then must run the render function that blends the information
 in the .Rmd file with the result from the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
html_document
\end_layout

\end_inset

 function.
 
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf
\end_layout

\end_inset

 function provides a framework in which parameters can be selectively replaced
 without changing the document in question.
 As a use case, suppose we write 3 R mark documents and we forget to specify
 the depth of the table of contents.
 Rather than editing each individual document, we might instead run 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<usage110, eval=F>>=
\end_layout

\begin_layout Plain Layout

rmd2pdf(c("crmda1.Rmd", "crmda2.Rmd", "crmda3.Rmd"), toc = TRUE, toc_depth
 = 2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This command can also replace a document template.
 For R markdown, our template is in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
theme
\end_layout

\end_inset

 folder, named 
\begin_inset Quotes eld
\end_inset

report-boilerplate.tex
\begin_inset Quotes erd
\end_inset

.
 If we want to test an alternative template, we can add a parameter 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
template = 
\begin_inset Quotes eld
\end_inset

theme/report-newboilerplate.tex
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 See the help pages for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2html
\end_layout

\end_inset

, and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rnw2pdf
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Standard
2.
 Run a shell script provided with the template.
\end_layout

\begin_layout Standard
The document skeleton is provided with a compiler script.
 It can do the same work as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rmd2pdf
\end_layout

\end_inset

 inside R.
 The same output can be generated by running a command line script that
 does the same work.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ./rmd2pdf.sh crmda.Rmd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The compiler script is designed to accept the same arguments as the function
 rmd2pdf, but in the command line it is a little tricky to specify the options
 because we have to protect quotation marks from interpretation.
 For example, here we enclose double quotes in single quotes:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ./rmd2pdf.sh --toc=TRUE --toc_depth=2 --template='"theme/report-newboilerplate.te
x"' crmda.Rmd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
3.
 If editing in R studio, there is a button 
\begin_inset Quotes eld
\end_inset

Knit.
\begin_inset Quotes erd
\end_inset

 It can be used, 
\emph on
but with extreme caution
\emph default
!
\end_layout

\begin_layout Standard
There is a small triangle beside the Knit button, and it offers a selection
 of document back ends.
 Be careful to choose the correct one.
 In this case, we choose 
\begin_inset Quotes eld
\end_inset

Knit to PDF
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
What happens if the user selects 
\begin_inset Quotes eld
\end_inset

Knit to HTML
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Knit to Doc
\begin_inset Quotes erd
\end_inset

? Well, here where the bad part starts.
 Rstudio tries to guess what format changes are required in order to fulfill
 that request.
 The document header will be adjusted, sometimes mangled beyond recognition.
 After that, even 
\begin_inset Quotes eld
\end_inset

Knit to PDF
\begin_inset Quotes erd
\end_inset

 will not work because the header is damaged.
 While we admit Rstudio is tremendously popular, we also think that this
 feature is tremendously annoying.
 In the 
\begin_inset Quotes eld
\end_inset

is that a feature or a bug?
\begin_inset Quotes erd
\end_inset

 debate, it is a little difficult to see the argument for the former point
 of view.
\end_layout

\begin_layout Subsection
Exploiting additional parameters in the shell scripts
\end_layout

\begin_layout Subsubsection
Testing themes without revising a document
\end_layout

\begin_layout Standard
In an rmd2html markdown document, authors may note that there are fairly
 dramatic differences that result from changes in the theme.
 Rather than editing the document over-and-over to see the effects, we suggest
 instead either using the function to test them:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

rmd2html("crmda.Rmd", theme="spacelab")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The same result can be obtained with the shell script
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./rmd2html.sh --theme='"spacelab"' crmda.Rmd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Many users who test R markdown to HTML conversion note that a very large
 file results when a theme, any theme, is specified.
 To test compilation and prevent the use of a Bootstrap library theme, the
 rmd2html function can be run like so.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

rmd2html("crmda.Rmd", theme=NULL)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the command line, the parameter value NULL should not be quoted
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

./rmd2html.sh --theme=NULL crmda.Rmd
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The nearly empty skeleton.Rmd provided with this package has a compiled size
 will be around 700KB.
 Preventing the insertion of the Bootstrap-based theme will reduce the HTML
 output file size to 62KB.
 This is a very sizable difference, of course, since there are limits on
 the total size of packages enforced on CRAN.
\end_layout

\begin_layout Standard
One point of caution.
 If one wants to edit the document itself and prevent the insertion of a
 theme, the correct syntax in R markdown will be 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
theme: null
\end_layout

\end_inset

 (neither capitalized nor quoted).
\end_layout

\begin_layout Subsubsection
Troubleshooting
\end_layout

\begin_layout Standard
Often, nearly always, a document will fail to compile.
 Failure will result if there is an R error in a code chunk or if there
 is an error in formatting.
 A good way to understand what's wrong is to inspect the intermediate documents.
 Recompile with parameter values 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
clean = FALSE
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
quiet = FALSE
\end_layout

\end_inset

, and either 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
keep_md = TRUE
\end_layout

\end_inset

 (for HTML output) or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
keep_tex = TRUE
\end_layout

\end_inset

 (for PDF) may help.
 By inspecting the intermediate files, editing them, and running the compiler
 commands again, we can usually find out what's wrong.
\end_layout

\begin_layout Standard
When 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
quiet = FALSE
\end_layout

\end_inset

, one of the especially important parts of the verbose output is the full
 command that is sent to pandoc.
 For example, compiling our minimal skeleton crmda.Rmd yields this intimidating
 list of command line options
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true,tabsize=2"
inline false
status open

\begin_layout Plain Layout

/usr/bin/pandoc +RTS -K512m -RTS crmda.utf8.md --to html4 --from markdown+autolink
_bare_uris+ascii_identifiers+tex_math_single_backslash --output /tmp/pj3/Untitle
d/crmda.html --smart --email-obfuscation none --self-contained --standalone
 --section-divs --table-of-contents --toc-depth 2 --template theme/guide-boilerp
late.html --highlight-style haddock --css theme/kutils.css --variable 'theme:boots
trap' --include-in-header /tmp/RtmpU3qSFQ/rmarkdown-str33e24223b3a.html --mathjax
 --variable 'mathjax-url:https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-A
MS-MML_HTMLorMML' --filter /usr/bin/pandoc-citeproc
\end_layout

\end_inset


\end_layout

\begin_layout Section
Working with LaTeX
\end_layout

\begin_layout Standard
Like so many other concepts and tools in this area, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
TeX
\end_layout

\end_inset

 was a creation of Donald Knuth at Stanford.
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
TeX
\end_layout

\end_inset

 was the precursor to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The CRMDA maintains a Web page about 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

: 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://crmda.ku.edu/latex-help
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That page has basic guides and information about the KU dissertation template.
 I prefer to work with 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

 documents, for a number of reasons.
 The quality of the PDF output is nicer, in my opinion, and more predictable.
 However, the major reason I prefer 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
LaTeX
\end_layout

\end_inset

 is that the Sweave option 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
split=TRUE
\end_layout

\end_inset

 is allowed.
 That option creates separate 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
*.tex
\end_layout

\end_inset

 output files, for each code chunk.
 The developers of the
\end_layout

\begin_layout Standard
Rmarkdown documents framework disapprove of `split` and elected, consciously,
 not to implement it.
 A couple of the questions not considered in our Web page are the following.
\end_layout

\begin_layout Section
Choosing among formats
\end_layout

\begin_layout Subsection
Which backend?
\end_layout

\begin_layout Standard
Should I end up with HTML or PDF? The answer depends on the intended audience/cl
ient.
 If a "paper" must be submitted, obviously choose PDF.
 If the document needs numbered equations, cross references, and "floating"
 tables and figures, choose PDF.
 If the document is intended for a Webpage, then HTML is the obvious choice
 (unless you simply want to convey a PDF document via the Web).
 Our HTML template includes a cascading style sheet feature that allows
 both color-highlighted sections and tabbed sub-sections.
\end_layout

\begin_layout Standard
There is concern about mathematics in HTML documents that deserves mention.
 For many years, the inability of Web pages to display equations was a major
 problem.
 Many tedious, ugly methods were developed.
 A more-or-less workable solution was developed, a framework called MathJax.
 MathJax allows inclusion of math markup in the page which--when the conditions
 are right--can be converted by the Web
\end_layout

\begin_layout Standard
browser to look like equations.
\end_layout

\begin_layout Standard
If the user is offline, or if the MathJax server is not available, then
 the HTML document's math will not display.
 If one wants to put math into a document, using HTML is inherently risky.
 If one needs to be 100% sure that math will display as intended, choose
 to create PDF documents.
\end_layout

\begin_layout Subsection
Which Frontend? Write in LaTeX or Rmarkdown?
\end_layout

\begin_layout Standard
This will be the answer:
\end_layout

\begin_layout Quote
When choosing the frontend, consider the backend.
 Where you want to end up determines where you start.
\end_layout

\begin_layout Standard
While working on this document, I prepared an original version in Rmarkdown
 that was compiled into HTML.
 Because some features failed to compile, I changed the backend to PDF in
 the report style.
 As a result, several features that are unique to the HTML backend had to
 be removed.
 HTML offers access to some special document formatting features that are
 simply not available in PDF, and the converse isalso true.
\end_layout

\begin_layout Standard
I believe the following are good conclusions:
\end_layout

\begin_layout Enumerate
1.
 If one intends to export as HTML, then markdown is, *by far*, the most
 reasonable choice for a frontend.
 Markdown was developed, first and foremost, as a simpler way to generate
 Web pages.
\end_layout

\begin_layout Enumerate
2.
 If one intends to export to PDF, then markdown or  LaTeX  can be useful.
 But  LaTeX  is probably better.
  LaTeX  is primarily intended for the creation of publication-quality documents
 in PDF format.
 Conversion from  LaTeX  to HTML is less decidedly less unsatisfactory.
\end_layout

\begin_layout Standard
Since one can put much  LaTeX  markup into a markdown document, perhaps
 the difference is not so great as it seems.
 The Rmarkdown compilation process (see Appendix 
\backslash
ref{appendix1}) generates a  LaTeX  file at an intermediate stage, so in
 some sense the same PDF result ought to be possible with Markdown or  LaTeX
  document preparation.
 However, in practice, we find differences in conveniences for authors.
\end_layout

\begin_layout Standard
I would summarize the situation with a poem:
\end_layout

\begin_layout Quote
Markdown documents intended for HTML allow some  LaTeX  code.
\end_layout

\begin_layout Quote
Markdown documents intended for PDF allow more  LaTeX  code.
\end_layout

\begin_layout Quote
Almost all HTML code is tolerated well in a Markdown document intended for
 HTML.
\end_layout

\begin_layout Quote
No HTML code is tolerated in a document intended for PDF.
\end_layout

\begin_layout Standard
The main point is that if one writes a markdown document, using special
 features intended for the backend, then it is generally not possible to,
 at the last minute, change the output format from HTML to PDF, or vice
 versa.
 HTML output has advantages in Web style features, while PDF documents have
 advantages in "on paper" presentations.
\end_layout

\begin_layout Standard
For novices,  LaTeX  seems more difficult than markdown.
 Perhaps this is not such a big hurdle as it used to be because [LyX](http://www.
lyx.org) is available.
 In my opinion, `LyX` makes preparing a  LaTeX  document much easier than
 it is to prepare
\end_layout

\begin_layout Standard
a similarly complicated markdown document.
 
\end_layout

\begin_layout Standard
While working on the markdown documents in this package, we are struck by
 the fact that markdown is a movement, a 
\emph on
frame of mind
\emph default
, rather than a product.
 It is a rapidly moving target.
 Features are added and changed on a weekly basis, it is usually difficult
 to know what will work and what will not.
 That is to say, we are on the steeply sloped curve of technical innovation
 and there is no reason to expect it to stabilize in the near term.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
<!-- Rstudio alters the document header, using its best guesses about -->
\end_layout

\begin_layout Plain Layout
<!-- settings suitable for PDF or HTML, *without warning the author*.
 If -->
\end_layout

\begin_layout Plain Layout
<!-- one opens an Rmarkdown document that can be compiled into PDF, and
 -->
\end_layout

\begin_layout Plain Layout
<!-- then chooses "knit to HTML", the document header will often be -->
\end_layout

\begin_layout Plain Layout
<!-- destroyed.
 Noticing that the output is not what the expected, the -->
\end_layout

\begin_layout Plain Layout
<!-- author then thinks, "I'll reverse that mistake by choosing 'knit to
 -->
\end_layout

\begin_layout Plain Layout
<!-- PDF', but that replaces the document header with another set of -->
\end_layout

\begin_layout Plain Layout
<!-- guesses preferred by the Rstudio team.
 As a result, a document that -->
\end_layout

\begin_layout Plain Layout
<!-- did compile from Rmd into PDF has lost the settings that it needs.
 -->
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Important caution about Math in the HTML backend
\end_layout

\begin_layout Standard
Math is not incorporated in HTML in the same way as PDF.
 Compiling a document into PDF uses a program like `pdflatex` to put the
 equations "in" the document.
 They are displayed in (more or less) the same way on various browsers and
 operating systems.
 The same is not true for math in HTML documents.
 Simply put, **math is not
\end_layout

\begin_layout Standard
allowed in HTML**.
 We think it is allowed--our eyes tells us it is
\end_layout

\begin_layout Standard
allowed--because we browse Web pages that show equations.
 However,
\end_layout

\begin_layout Standard
this is an illusion achieved by extraordiary measures involving
\end_layout

\begin_layout Standard
Javascript and third party servers.
 The beautifully formatted 
\backslash
LaTeX
\end_layout

\begin_layout Standard
equation is not "embedded" in the HTML, it is instead delivered as
\end_layout

\begin_layout Standard
code "available for rendering" in the Web browser.
 The HTML code is
\end_layout

\begin_layout Standard
converted, via javascript and functions supplied interactively from
\end_layout

\begin_layout Standard
the MathJax Web server.
\end_layout

\begin_layout Subsubsection*
Markdown to HTML allows most valid HTML markup, but Markdown to PDF does
 not allow all LaTeX.
\end_layout

\begin_layout Standard
This is a somewhat surprising difference.
 All HTML markup I've tried
\end_layout

\begin_layout Standard
works well in an Rmarkdown document that aims to go into HTML.
\end_layout

\begin_layout Standard
However, not all  LaTeX  markdown is allowed in an Rmarkdown document
\end_layout

\begin_layout Standard
going to PDF.
 And even less  LaTeX  code works well if the intended
\end_layout

\begin_layout Standard
backend is HTML.
 One cannot insert italics with  LaTeX  in a document
\end_layout

\begin_layout Standard
intended for HTML.
 For example, writing `
\backslash
emph{italics}` or bold
\end_layout

\begin_layout Standard
`
\backslash
textbf{bold}` in the style of  LaTeX  code will have no effect in an
\end_layout

\begin_layout Standard
HTML document.
 However, if PDF output is used, then both of those
\end_layout

\begin_layout Standard
 LaTeX  codes work.
 As evidence, note I get 
\backslash
emph{italics} and bold
\end_layout

\begin_layout Standard

\backslash
textbf{bold} in this PDF document.
 
\end_layout

\begin_layout Subsection
Should one prefer `Sweave` or `knitr`?
\end_layout

\begin_layout Standard
This question is meaningful only in `noweb`/ LaTeX  documents.
 In Rmarkdown, `knitr` is the only available method to process code chunks.
 In `noweb`, one can choose between `Sweave` and `knitr`.
 Perhaps that suggests that, if one must learn one set of chunk options,
 then `knitr` options are the right place to start (since they can be used
 in documents intended for HTML or PDF).
 The chunk options allowed the original `Sweave` were `echo` (include code
 with output?), `eval` (run the chunk calculations?), `include` (display
 the chunk in the document?), `fig` (code generates a figure?) and `results`
 (output in  LaTeX  is handled differently than raw 
\backslash
TeX).
 There are a few others, but that is most of the story.
 `knitr` honored most of the Sweave options and then added many more (see
 [knitr code chunk options](https://yihui.name/knitr/options)).
\end_layout

\begin_layout Standard
One benefit of Rmarkdown with `knitr` is that it is possible to make documents
 about other programs (not just R).
 I've explored knitr to weave documents about BASH shell programming, for
 example.
\end_layout

\begin_layout Section
Troubleshooting
\end_layout

\begin_layout Standard
The first step is understanding the trouble.
 The trouble stems from the fact that each document must be transformed
 through several stages to reach the final result.
 Understanding that, and learning about the problems that appear at each
 stage, can help with the troubleshooting strategies that we recommend.
\end_layout

\begin_layout Subsection
Compilation Stages
\backslash
label{appendix1}
\end_layout

\begin_layout Standard
Steps to compile documents break down into 2 phases.
\end_layout

\begin_layout Standard
1.
 Handle code chunks
\end_layout

\begin_layout Standard
2.
 render the resulting document.
\end_layout

\begin_layout Standard
A noweb file is converted from Rnw into PDF by a sequence of transitions.
\end_layout

\begin_layout Standard
1.
 `Rnw -> tex`.
 This is called "weaving" or "knitting", depending on whether Sweave or
 knitr is the code processing engine.
 R finds the code in the Rnw file and inserts results into a new LaTeX file.
 The difference between weaving and knitting will be explained below.
\end_layout

\begin_layout Standard
2.
 `tex -> pdf`.
 The default is `pdflatex` for this step, but the alternative `xelatex`
 is growing in popularity because it more gracefully handles Unicode characters
 (utf8).
 If the document is edited with [LyX](http://www.lyx.org), there is an
\end_layout

\begin_layout Standard
implicit step 0,
\end_layout

\begin_layout Standard
0.
 `LyX -> Rnw`.
 
\end_layout

\begin_layout Standard
In the LyX pull down menu system, this is represented by Export -> Sweave.
\end_layout

\begin_layout Standard
A markdown file is converted from Rmd to HTML by this sequence of transitions
\end_layout

\begin_layout Standard
1.
 `Rmd -> md`.
 The "knitting" process replaces code chunks by R input and output, converting
 the R markdown file into an ordinary markdown file.
 In my system, an "md" file is generated, and then a second "utf8.md" is
 generated to clean up the file encoding.
\end_layout

\begin_layout Standard
2.
 `md -> HTML`.
 Currently, most people use the program `pandoc` for this.
 A version of `pandoc` is distributed with Rstudio for the convenience of
 users.
 Linux users probably have `pandoc` available as standard system packages
 and the Rstudio version be removed.
\end_layout

\begin_layout Standard
The production of PDF from markdown, involves an additional transition.
\end_layout

\begin_layout Standard
1.
 `Rmd -> md`.
 Knitting converts code chunks into R input and output that is inserted
 into an `md` file created in the `pandoc` markdown style.
\end_layout

\begin_layout Standard
2.
 `md -> tex`.
 A  LaTeX  file is created by `pandoc`.
 In the header of the `md` document, one can set a number of parameters
 to alter the  LaTeX  generation process.
 For troubleshooting, "keep_tex: yes" to keep the `tex` file.
\end_layout

\begin_layout Standard
3.
 `tex -> pdf`.
 The default program for this has been `pdflatex`.
 It may be important to know that a  LaTeX  document may need to be run
 through `pdflatex` several times because cross-references among pages and
 equations need to be made consistent.
\end_layout

\begin_layout Standard
The R packages `rmarkdown` and `knitr` orchestrate the process that builds
 the instructions to `pandoc`.
 In `rmarkdown`, the function `render` orchestrates all of the work.
 It calls chunk calculator and assigns work among the various conversion
 programs.
 The functions in the stationery package named `rmd2pdf` or `rmd2html` are
 "wrapper" functions that adjust settings sent to `render`.
\end_layout

\begin_layout Subsection
Avoiding compilation trouble
\end_layout

\begin_layout Standard
The document production phase can fail at many steps (see Appendix 
\backslash
ref{appendix1}).
 While editing a document, authors are well advised to heed the advice:
\end_layout

\begin_layout Standard

\backslash
begin{quote}
\end_layout

\begin_layout Standard

\backslash
textbf{Compile early, compile often!}
\end_layout

\begin_layout Standard

\backslash
end{quote}
\end_layout

\begin_layout Standard
When a mistake is inserted, it is best to find it as soon as possible.
\end_layout

\begin_layout Subsection
When debugging, check intermediate files
\end_layout

\begin_layout Standard
The compiler scripts may erase intermediate files.
 While debugging a document, we want to disable that clean-up step so that
 we can see what goes wrong.
 In an Rmd document that ends up in PDF, for example, we should be able
 to inspect an `md` file and a `tex` file.
 We can not only inspect those files, but we can also attempt to compile
 them in isolation so that we can see what is going wrong.
 
\end_layout

\begin_layout Standard
This document includes the header argument `keep_tex: true`, which means
 we save a copy of "reports_and_guides.tex".
\end_layout

\begin_layout Standard
While developing this document, some of the problems with backend-specific
 code have come to the forefront.
 The HTML backend allows pleasant color-coded section headings which included
 in the PDF output.
 Tables that work well in PDF documents don't work in HTML, and vice versa.
 Some HTML tables that are legal HTMLdon't cooperate with `pandoc`.
 
\end_layout

\begin_layout Standard
It is also worth mentioning that error messages are not always informative.
 In fact, we sometimes don't get error messages when we should.
 Rather, we simply receive bad output.
 While developing this document I noticed that when a user includes erroneous
  LaTeX  code in a markdown document, a flawed HTML output is generated
 without error or warning.
 On the other hand, changing the intended backend to PDF causes the compiler
 to fail and issue an error message.
 If one is exporting to HTML, then, a very careful proofreading of the output
 to check conversion of  LaTeX  code into HTML is necessary.
\end_layout

\begin_layout Section
What do we Really, Really Need?
\end_layout

\begin_layout Standard
## Things we wish we could have in HTML output (that we can get in PDF output)
\end_layout

\begin_layout Standard
Numbered equations, easy cross references, numbered tables and figures
\end_layout

\begin_layout Standard
## Things we wish we could have in PDF output (that we can get in HTML)
\end_layout

\begin_layout Standard
A splash of color, mainly.
 This is possible in PDF, but more
\end_layout

\begin_layout Standard
difficult, at least on the surface.
\end_layout

\begin_layout Subsection
Math
\end_layout

\begin_layout Standard
We are a Center focused on methodology.
 It is necessary to be able to
\end_layout

\begin_layout Standard
write about math, preferably with a standard, uniform mathematical
\end_layout

\begin_layout Standard
markup language, such as 
\backslash
LaTeX.
\end_layout

\begin_layout Standard
Many social scientists are not familiar with  LaTeX  document
\end_layout

\begin_layout Standard
preparation.
 That was a hurdle that kept many authors with Microsoft
\end_layout

\begin_layout Standard
Word, even when they were frustrated with it.
 The difficulty of using
\end_layout

\begin_layout Standard
 LaTeX  was solved, to a significant extent, by LyX, an open source
\end_layout

\begin_layout Standard
graphical interface.
 With LyX, or other editors that could generate
\end_layout

\begin_layout Standard
 LaTeX  output (such as Scientific Word, TexMacs, or Abiword), authors
\end_layout

\begin_layout Standard
who were not computer programmers could learn enough  LaTeX  to finish
\end_layout

\begin_layout Standard
their projects.
\end_layout

\begin_layout Subsection
Literate documents: include code and output
\end_layout

\begin_layout Standard
We need to be able to write about computer code.
 The "old fashioned"
\end_layout

\begin_layout Standard
way is to copy/paste code and output into documents.
 That's somewhat
\end_layout

\begin_layout Standard
error prone and difficult to keep up-to-date.
\end_layout

\begin_layout Standard
Donald Knuth, a famous Stanford professor of computer science, proposed
 strategies to integrate the production of documents with the development
 of computer code.
 Rather than creating code in one file, and documentation in another, the
 idea was that the two parts of our work should be blended in a "literate
 programming" exercise.
 
\end_layout

\begin_layout Standard
The literate programming idea is more a general way of life than it is a
 particular document production strategy.
 It is, partly, aimed at programmers who don't like to write instruction
 manuals.
 In the end, however, it may have more impact on non-programmers who need
 to prepare technical reports that include computer code examples.
\end_layout

\begin_layout Standard
In computer programming, one of the biggest impacts of literate programming
 is the proliferation of systems for preparation of documentation within
 code files.
 In the 1990s and early 2000s, when I was working on the Swarm Simulation
 System, we used a framework called Autodoc that allowed us to write instruction
s into Objective-C code
\end_layout

\begin_layout Standard
that were later harvested and turned into instructional manuals.
 See, for example, the documentation for the [Opinion Formation model]
\end_layout

\begin_layout Standard
(http://pj.freefaculty.org/Swarm/MySwarmCode/OpinionFormation/Opinion-Docs).
 The
\end_layout

\begin_layout Standard
Autodoc program was poorly documented and not easy to get, but soon after
 that, a new coding system called Doxygen became widely available.
 Doxygen, developed for creation of instruction manuals for C++ programs,
 was a major success in computer programming.
 Like Autodoc, Doxygen gave programmers a relatively convenient method to
 explain what they were doing without wasting too much time.
\end_layout

\begin_layout Standard
In the modern experience of most CRMDA staffers, the "documentation inside
 code" approach is visible in the Roxygen markup method used for functions
 in R documents.
 Any function worth using should have Roxygen markup.
\end_layout

\begin_layout Subsection
Where we have been
\end_layout

\begin_layout Standard
In order to embrace the importance of using either markdown or 
\backslash
LaTeX, one must first abandon the idea that Microsoft Word can ever be useful
 for serious authorship.
 That's a big step for many graduate students and professors.
\end_layout

\begin_layout Standard
If we look past GUI "what you see is what you get" (*wyswig*) word processors,
 where do we go? For a long time, the only answer was 
\backslash
LaTeX.
 However, there was a fatal weakness in 
\backslash
LaTeX.
 It is intended for PDF output, not Web pages.
 Exports into HTML were problematic.
  LaTeX  was not only difficult for some to use, but it also did not benefit
 from fancy features that were becomming available in the Internet, especially
 cascading style sheets and Javascript.
\end_layout

\begin_layout Standard
This gap in the document production process created a need for a new methods.
 In the 1990s, there was quite a bit of effort to make user friendly Web
 page editors, so that authors could have a Word-like experience that would
 generate HTML.
 The end result, generally, was difficult-to-maintain HTML documents.
 It was generally not feasible to edit and revise documents, the HTML generated
 was both extremly complicated and generally unsatisfactory.
\end_layout

\begin_layout Standard
Another strategy was the development of alternative markup languages.
 In a way similar to 
\backslash
LaTeX, these markup languages (e.g., `docbook`) drop the idea that the user
 should have a *wyswig* experience.
 Instead, the author would again become a programmer who would insert symbols
 to create sections.
\end_layout

\begin_layout Standard
Markdown was developed as a rejection of both ugly markup documents (either
 LaTeX or HTML) and *wyswig* editors.
 The idea is that documents should be text files that are readable *as is*
 but also convertible into other backends.
 The "markdown" movement seeks to deliver an easier-to-edit, less difficult-to-r
ead, and easier-to-convert format.
 The leader is John Gruber, whose Website is boldly named ["daringfireball"](htt
ps://daringfireball.net/projects/markdown).
\end_layout

\begin_layout Standard
Markdown is intended to be easy-to-read, so that even if it is not compiled
 into a backend, it might be presentable to an audience of non-programmers.
 That general idea seems unrealistic to me, there is almost never going
 to be an audience (for CRMDA, at least), which is eager to look at a markdown
 file.
 The dropback argument is that a markdown file is more easily produced by
 a novice who does not want to learn to use 
\backslash
LaTeX.
 This seems more persuasive.
\end_layout

\begin_layout Standard
The strength of markdown is that it makes it fairly easy to produce HTML
 documents that utilize some (not all) of the strengths of the World Wide
 Web's most commonly used method of communication.
\end_layout

\begin_layout Standard
Where markdown is not capable, one can still write "raw HTML" in the middle
 of a markdown document.
\end_layout

\begin_layout Section
Required footer 
\end_layout

\begin_layout Standard
The guide documents we require authors include a final chunk that includes
 the session information, to be used in bug-tracking.
 
\end_layout

\begin_layout Standard
Reports do not include raw output, so it is not recommended to insert that
 raw output in the report.
 Instead, we ask report writers toinclude a final R chunk that saves the
 session information in a file in the same directory as the pdf output.
\end_layout

\begin_layout Standard
```{r session, include=F}
\end_layout

\begin_layout Standard
zz <- "stationery-sessionInfo.Rout"
\end_layout

\begin_layout Standard
capture.output(warnings(), file = zz)
\end_layout

\begin_layout Standard
capture.output(sessionInfo(), file = zz, append = TRUE)
\end_layout

\begin_layout Standard
```
\end_layout

\begin_layout Standard
Available under
\end_layout

\begin_layout Standard
[Created Commons license 3.0 <img src="http://crmda.dept.ku.edu/images/cc-3.0.png"
 alt="CC BY"
\end_layout

\begin_layout Standard
style="width: 75px;height: 20px;"/>](http://creativecommons.org/licenses/by/3.0/)
\end_layout

\begin_layout Section*
References
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "theme/R"
options "apalike2"

\end_inset


\end_layout

\begin_layout Subsection*
\begin_inset Note Note
status open

\begin_layout Subsection*
Session Info
\end_layout

\begin_layout Plain Layout
Session Information is usually not written into a report, but an output
 file is created by the following pieces.
 Please leave the next 2 chunks
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<sessioninfo, include=F>>=
\end_layout

\begin_layout Plain Layout

zz <- "stationery.Rout"
\end_layout

\begin_layout Plain Layout

capture.output(sessionInfo(), file = zz, append = FALSE)
\end_layout

\begin_layout Plain Layout

if (!is.null(warnings())){
\end_layout

\begin_layout Plain Layout

    capture.output(warnings(), file = zz, append =  TRUE)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<RoptionsRestore, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

par(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
