%% LyX 2.2.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[10pt,english,aspectratio=1609]{beamer}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{3}
\setlength{\parskip}{\smallskipamount}
\setlength{\parindent}{0pt}

\makeatletter
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
\usepackage[natbibapa]{apacite}
\providecommand*{\code}[1]{\texttt{#1}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.
% \VignetteIndexEntry{rnw2pdf-slides-sweave}
% \VignetteEngine{Sweave}
% \VignetteBuilder{stationery::rnw2pdf}

\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage{graphicx}
\newcommand\makebeamertitle{\frame{\maketitle}}%

% use 'handout' to produce handouts
%\documentclass[handout]{beamer}
\usepackage{wasysym}
\usepackage{pgfpages}

%PJ 20180213: where did following come from, why?
\newcommand{\vn}[1]{\mbox{{\it #1}}}
\newcommand{\vb}{\vspace{\baselineskip}}
\newcommand{\vh}{\vspace{.5\baselineskip}}
\newcommand{\vf}{\vspace{\fill}}
\newcommand{\splus}{\textsf{S-PLUS}}
\newcommand{\R}{\textsf{R}}
%PJ 20180213



\input{theme/guidePreambleSweavel.tex} 

%Some eager users of APA6 style want this
\usepackage[natbibapa]{apacite}
\renewcommand{\doiprefix}{doi:\kern-1pt}
\setlength{\bibsep}{10pt}


\definecolor{darkblue}{HTML}{1e2277}

%would be in beamerthemekucrmda%
\mode<presentation>
\definecolor{kublue}{RGB}{0,81,186}
\usefonttheme{professionalfonts}
\useoutertheme{infolines}
\useinnertheme{rounded}
%disable rounded for alert and example boxes%
\setbeamertemplate{blocks}[default]
\usecolortheme{whale}
\usecolortheme{orchid}
%\setbeamercolor*{structure}{bg=kublue,fg=kublue!90!black}
\setbeamercolor{structure}{fg=kublue}
\setbeamercolor{frametitle}{bg=kublue}
\setbeamercolor{upper separation line head}{fg=kublue}
%text color in table of contents
\setbeamercolor{section in toc}{fg=kublue!40!black}


\setbeamertemplate{frametitle continuation}[from second]
\renewcommand\insertcontinuationtext{...}
\beamertemplatenavigationsymbolsempty
%end of beamerthemekucrmda%

%If you want bigger margins, try this:
\setbeamersize{text margin left=05mm,text margin right=10mm} 

%Following seems to have no effect now
%\usepackage{handoutWithNotes}
%\pgfpagesuselayout{3 on 1 with notes}[letterpaper, border shrink=5mm]

\titlegraphic{\includegraphics[width=6cm]{theme/logo}}

\makeatother

\usepackage{babel}
\usepackage{listings}
\renewcommand{\lstlistingname}{\inputencoding{latin9}Listing}

\begin{document}
% In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/t,split=FALSE,ae=F,height=4.5,width=7}

<<Roptions, echo=FALSE, include=FALSE, results=hide>>=
opts.orig <- options()
options(width=70, prompt = " ", continue = "  ")
options(useFancyQuotes = FALSE)
set.seed(12345)
par.orig <- par(no.readonly=TRUE) 
pjmar <- c(4.1, 4.1, 1.5, 2.1)
par(mar=pjmar, ps=11)
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=12, xpd=F)))
pdf.options(onefile=F,family="Times",pointsize=12)
if(!file.exists("tmpout")) dir.create("tmpout", showWarnings=F)
@

<<texcopy, include=FALSE, results=hide>>=
library(stationery)
## If theme directory does not have required images or TeX files
## we need to retrieve them and put them in "theme" directory. 
logos <- c(logo = "logo.pdf",
            logomini = "logomini.png")
texfiles <- c("guidePreambleSweavel.tex", "mlm.bib")
getFiles(logos, pkg = "stationery")
getFiles(texfiles, pkg = "stationery")
@

\title[beamer]{Skeleton rmd2pdf-slides-sweave}

\author{Paul Johnson\inst{1}}

\institute[K.U.]{\inst{1}Center for Research Methods and Data Analysis }

\date{2018}

\makebeamertitle
\logo{\includegraphics[width=5mm]{theme/logomini}}

\AtBeginSection[]{
  \frame<beamer>{ 
    \frametitle{Outline}
    \tableofcontents[currentsection] 
  }
}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Outline}

\tableofcontents{}

\end{frame}

\global\long\def\vb#1{\bm{\mathrm{#1}}}

\section{About slides}

\begin{frame}[allowframebreaks, containsverbatim]
\frametitle{This is a default style we created}
\begin{itemize}
\item The theme settings are in the preamble. No external dependency on
a theme file needed.
\item Once we saw how simple a Beamer theme is–just a designation theme
types for the outer edges and inner content–we understood that it
is quite easy to put that in the preamble.
\item Our preferred theme uses the \emph{right} shades of blue along with:
\begin{exampleblock}{Key elements in our theme}

\inputencoding{latin9}\begin{lstlisting}
\useoutertheme{infolines}
\useinnertheme{rounded}
\setbeamertemplate{blocks}[default]
\end{lstlisting}
\inputencoding{utf8}\end{exampleblock}
\item The outer theme is a conservative use of screen real estate (narrow
top boxes)
\item The inner theme gives the jazzy 3-D bullets
\item We don't want the rounded alert boxes, however, so we have blocks
set to the default box style.
\item As the Beamer documentation makes clear, there are just a few of these
outer and inner themes that can be ``mixed-and-matched'' to suit
the author's taste.
\end{itemize}
\end{frame}

\begin{frame}
\frametitle{This is a default style we selected}
\begin{itemize}
\item This document is formatted to create 16:9 resolution slides. 
\item To alter that, change document setting options.
\item Citations use natbib with apacite \citep{mccullagh_nelder_1989}
\item A slide with not options is fine, except if you need to include R
code chunks or listings objects. In that case, ``containsverbatim''
will be necessary
\end{itemize}
\end{frame}

\section{R Code chunks}

\subsection{Displaying R code and output}

\begin{frame}[containsverbatim]
\frametitle{Listings class is used to display code chunks}
\begin{itemize}
\item R code chunks are displayed with LaTeX listings, a highly customizable
class for code displays. 
\item We use 2 types of listings, one for R code input and one for R output.
By default, the output listings use smaller font to fit more output
within the page, but that is adjustable, either on a 
\begin{itemize}
\item document wide basis
\item per-code chunk basis
\end{itemize}
\end{itemize}
\end{frame}\begin{frame}[containsverbatim]
\frametitle{Code chunks require "containsverbatim" frame}
\begin{itemize}
\item Please name all chunks. Here is a chunk named \code{dat10}
\end{itemize}
<<data10>>=
x <- rnorm(100)
mean(x)
@
\begin{itemize}
\item An example of \code{inline lm(y \textasciitilde{} x, data = dat)}.
That's in an environment ``\texttt{\textbackslash{}code\{lm(y \textasciitilde{}
x, data = dat\}}''
\item By marking text as ``\textbackslash{}code'', a color box will be
created that uses the same color scheme as the R input box. This is
a visual gimmick, two environments colored to be similar.
\end{itemize}
\end{frame}

\begin{frame}[containsverbatim]
\frametitle{Did you notice: no line numbers on code chunk in previous?}
\begin{itemize}
\item The margins are adjustable, see preamble for example. 
\item Note the line numbers are NOT obscured if code chunk ``nested''
inside the item. 

<<data20>>=
x <- rnorm(100)
mean(x)
@

Code chunk previous slide is so close to edge that numbering is not
visible if margins are very small.
\item If margins are made any smaller, the numbers indexing code lines are
``off the edge''
\end{itemize}
\end{frame}

\subsection{More Frame Options}

\begin{frame}[allowframebreaks]
\frametitle{Slide with "allowframebreaks" can spill onto several slides}

Some filler that causes the spill onto another slide. Note confusing
equation labels
\begin{itemize}
\item onefile

\begin{equation}
1\times1\label{eq:one}
\end{equation}
\item two

\[
2\times1
\]
\item three

\begin{equation}
3\times1\label{eq:three}
\end{equation}
\item four 

\[
4\times1
\]
\item five

\[
5\times1
\]
\item six

\[
6\times1
\]
\item seven

\[
7\times1
\]
\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks,containsverbatim]
\frametitle{Both "allowframebreaks" and "containsverbatim" accomodate large R output}

<<reg10>>=
example(lm)
@

\end{frame}

\begin{frame}[allowframebreaks,containsverbatim]
\frametitle{Using "allowframebreaks" and "containsverbatim"}
\begin{itemize}
\item I usually use both \textquotedbl{}allowframebreaks\textquotedbl{}
and \textquotedbl{}containsverbatim\textquotedbl{} on most slides.
\item ``allowframebreaks'' is now harmless. It has no effect in current
configuration unless there are actually 2 or more slides worth of
material
\item However, containsverbatim is not harmless. It will break use of beamer
overlay features, or one-at-a-time revelation of enumerated lists.
\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks,containsverbatim]
\frametitle{2 Columns}
\begin{columns}[t]

\column{6cm}
\begin{itemize}
\item Total width of page is 12cm
\item Author can set each column at 6cm
\end{itemize}
\begin{block}{A Block Can be Nested}

This is inside the content area of the block

\end{block}

\column{6cm}
\begin{itemize}
\item In LyX, I find it tricky to use the GUI tool for slides (in general)
\item Columns often seem difficult, but I still use GUI because I don't
want to write out lots of code
\item But I do manually write Frames in LyX because I don't enjoy the GUI
style these days.
\end{itemize}
\end{columns}

\end{frame}

\begin{frame}[allowframebreaks]
\frametitle{References}

\bibliographystyle{apalike2}
\bibliography{theme/mlm}

\end{frame}

\begin{frame}[containsverbatim, allowframebreaks]
\frametitle{Session}

<<sess10>>=
sessionInfo()
@

<<RoptionsRestore, echo=F, include=F>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
par(par.orig)
@

\end{frame}
\end{document}
