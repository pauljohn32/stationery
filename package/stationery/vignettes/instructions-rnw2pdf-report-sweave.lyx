#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
% \VignetteIndexEntry{rnw2pdf-report-sweave}
% \VignetteEngine{Sweave}
% \VignetteBuilder{stationery::rnw2pdf}
% Don't remove next commented line, its needed to fool Sweave
%\usepackage{Sweave}

\usepackage[includehead,includefoot,
lmargin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

\usepackage{multicol}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{xcolor}
\usepackage{dcolumn}
\usepackage{booktabs}


\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
%% Load Hyperref, don't let LyX do this
\input{theme/reportPreambleSweavel.tex}

\usepackage{fancyvrb}
\fvset{listparameters={\setlength{\topsep}{0em}}}
\end_preamble
\use_default_options false
\begin_modules
logicalmkup
sweave
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\branch R
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout

%% Fill in values of the arguments here, 
\end_layout

\begin_layout Plain Layout

%% If blanks are needed, must insert value " ~ "
\end_layout

\begin_layout Plain Layout

%% If comma needed inside value, wrap in {}.
\end_layout

\begin_layout Plain Layout

%% Delete secondauthor and thirdauthor if not needed
\end_layout

\begin_layout Plain Layout


\backslash
reportsetup{%
\end_layout

\begin_layout Plain Layout

  firstauthor={
\end_layout

\begin_layout Plain Layout

    lastname=Johnson,
\end_layout

\begin_layout Plain Layout

    firstname=Paul~E., 
\end_layout

\begin_layout Plain Layout

    affiliation=Director{,}~CRMDA,
\end_layout

\begin_layout Plain Layout

    email=pauljohn@ku.edu},
\end_layout

\begin_layout Plain Layout

  title={Guide for authoring reports with Sweave code chunks},
\end_layout

\begin_layout Plain Layout

  rightlogo={theme/logo.pdf},
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
reporthdr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Please leave this code: In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t, split=FALSE, ae=FALSE, height=5, width=6}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<texcopy, include=FALSE, echo=FALSE, results=hide>>=
\end_layout

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

## If theme directory does not have required images or TeX files
\end_layout

\begin_layout Plain Layout

## we need to retrieve them and put them in "theme" directory.
 
\end_layout

\begin_layout Plain Layout

logos <- c(logoright = "logo.pdf")
\end_layout

\begin_layout Plain Layout

texfiles <- c("reportPreambleHeader.tex", 
\end_layout

\begin_layout Plain Layout

              "preambleFooter.tex", 
\end_layout

\begin_layout Plain Layout

              "addressFooter.tex",
\end_layout

\begin_layout Plain Layout

              "reportPreambleSweavel.tex")
\end_layout

\begin_layout Plain Layout

getFiles(logos, pkg = "stationery")
\end_layout

\begin_layout Plain Layout

getFiles(texfiles, pkg = "stationery")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Please leave this chunk
\end_layout

\begin_layout Plain Layout

<<Roptions, echo=F, include=FALSE,results=hide>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly=TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(5.1, 5.1, 1.5, 2.1) 
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=10)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=FALSE, family="Times", pointsize=10)
\end_layout

\begin_layout Plain Layout

if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
\noindent
This shows how we use R 
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"

\end_inset

 to make report documents using the CRMDA style.
 This is a LaTeX 
\begin_inset Quotes eld
\end_inset

noweb
\begin_inset Quotes erd
\end_inset

 guide document generated with the knitr code chunk engine.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is a LaTeX 
\begin_inset Quotes eld
\end_inset

noweb
\begin_inset Quotes erd
\end_inset

 report generated with the Sweave engine.
 
\end_layout

\begin_layout Standard
Create a skeleton document by opening R and running
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=F>>=
\end_layout

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

initWriteup("rnw2pdf-report-sweave")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That will create a folder 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
writeup/rnw2pdf-report-sweave
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 (unless you request otherwise by setting the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
dir
\end_layout

\end_inset

 argument).
 We can compare it to the very similar document produced with 
\begin_inset Quotes eld
\end_inset

knitr
\begin_inset Quotes erd
\end_inset

 (in the companion folder rnw2pdf-report-knitr).
 
\end_layout

\begin_layout Standard
We suggest you
\end_layout

\begin_layout Enumerate
Compile this document 
\emph on
as is 
\emph default
to test your setup
\end_layout

\begin_layout Enumerate
Make revisions incrementally, and re-compile often to make sure nothing
 has been broken.
\end_layout

\begin_layout Standard
Don't make changes that you don't understand in the code chunks above or
 the last chunks below.
\end_layout

\begin_layout Section
LyX: Cautions
\end_layout

\begin_layout Standard
The document preamble has manual settings for margins (geometry) as well
 as hyperlinks (PDF hyperref).
 Don't use the LyX pull down menu to revise them.
 Edit preamble or config files for that.
 Repeat 
\series bold
CAUTION
\series default
: Don't change the page margins or settings for hyperlinks with pull down
 menus.
\end_layout

\begin_layout Section
What to edit
\end_layout

\begin_layout Section*
Title and author information
\end_layout

\begin_layout Standard
The first block in the document has the title and author information.
\end_layout

\begin_layout Subsection*
Footer information
\end_layout

\begin_layout Standard
The footer in this document uses data that is provided in a file named 
\begin_inset Quotes eld
\end_inset

addressFooter.tex
\begin_inset Quotes erd
\end_inset

.
 After the document is compiled for the first time, that document should
 be available in the theme folder.
\end_layout

\begin_layout Subsection*
About the theme folder
\end_layout

\begin_layout Standard
The theme folder should be empty when the initProject() function is run.
 
\end_layout

\begin_layout Standard
There is an R code chunk above called 
\begin_inset Quotes eld
\end_inset

texcopy
\begin_inset Quotes erd
\end_inset

.
 It will copy configuration files from the package into the theme folder.
 After running this for the first time, those files will not be automatically
 replaced by the scripts.
 
\end_layout

\begin_layout Standard
That means authors are free to edit them to fit their needs.
\end_layout

\begin_layout Standard
If the author makes an error in editing a theme file, it is safe to delete
 the erroneous file and run the compile script again.
 That will copy a fresh version of the theme file into the directory.
\end_layout

\begin_layout Section
Check our documentation
\end_layout

\begin_layout Standard
There are several vignettes distributed with this package.
 Please review them.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

crmda
\begin_inset Quotes erd
\end_inset

: the package framework overview
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

code_chunks
\begin_inset Quotes erd
\end_inset

: discusses display of code in LaTeX documents
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

instructions-rnw2pdf-report-sweave
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Compile as usual, or with rnw2pdf
\end_layout

\begin_layout Standard
The skeleton file is provided in 2 formats, LyX and Rnw.
 
\end_layout

\begin_layout Standard
In either case, please understand that compiling is a two step process.
\end_layout

\begin_layout Enumerate
knitting: Run R to do the calculations in the R code chunks and write out
 a LaTeX file
\end_layout

\begin_layout Enumerate
compiling: Run a LaTeX program, such as pdflatex or xelatex to convert the
 LaTeX file to pdf.
 It is usually necessary to run the compiler two or more times, along with
 a separate bibliography program.
 If it is available, we suggest an aggregator named texi2pdf, which will
 handle this effort.
\end_layout

\begin_layout Subsection*
Edit the LyX file.
\end_layout

\begin_layout Standard
There are 4 methods, we hope one will suit your workflow.
\end_layout

\begin_layout Enumerate
Use the LyX editor.
 The file can be compiled to PDF in LyX, just like any other LyX file.
 LyX handles conversion from LyX to Rnw to tex to PDF.
 This has the same effect as using LyX from the command line.
 The following will create the PDF file using pdflatex as the final comiler:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ lyx -e pdf2 skeleton.lyx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Because lyx uses a separate working directory for the compilation work,
 the project directory stays clean.
 None of the intermediate LaTeX files (*.log, *.log, *.bbl) will appear.
\end_layout

\end_deeper
\begin_layout Enumerate
Open an R session and make sure the working directory is the same as the
 project writeup.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rnw2pdf("skeleton.lyx", engine = "Sweave")
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
The shell script 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rnw2pdf.sh
\end_layout

\end_inset

 is provided in the same folder.
 It can be run in the shell as
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ./rnw2pdf.sh --engine='"Sweave"' skeleton.lyx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the discussion in the next sub section, we outline usage of additional
 arguments with rnw2pdf for the compilation of Rnw files.
 All of those arguments are equally applicable in this context.
\end_layout

\end_deeper
\begin_layout Enumerate
In case you want to track the steps of compiling one by one, open the file
 in LyX.
 Use the pull down menu 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
File
\end_layout

\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Export
\end_layout

\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Sweave
\end_layout

\end_inset

.
 That will create a file named 
\begin_inset Quotes eld
\end_inset

skeleton.Rnw
\begin_inset Quotes erd
\end_inset

.
 This is the equivalent of the command line statement
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ lyx -e sweave skeleton.lyx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After that Rnw file is created, proceed as described in the next subsection.
\end_layout

\begin_layout Standard
This two-step process is valuable for debugging.
 It makes it easier to spot trouble by focusing on the separate transitions.
\end_layout

\end_deeper
\begin_layout Subsection*
Edit the Rnw file
\end_layout

\begin_layout Standard
The Rnw file we provide is produced by LyX, it is an intermediate step in
 the document production sequence.
 A two step compilation procedure is necessary.
 First, one must convert the 
\begin_inset Quotes eld
\end_inset

Rnw
\begin_inset Quotes erd
\end_inset

 file to 
\begin_inset Quotes eld
\end_inset

pdf
\begin_inset Quotes erd
\end_inset

 (with Sweave), and then the weaved tex file is compiled into pdf by pdflatex
 (or one of the other LaTeX compilers).
 
\end_layout

\begin_layout Standard
The work flow here will vary, depending on your experience and the editor
 you choose to use.
 Here are some possibilities:
\end_layout

\begin_layout Enumerate
You may have a 
\begin_inset Quotes eld
\end_inset

noweb
\begin_inset Quotes erd
\end_inset

 aware editor.
 Emacs, Rstudio, and others have menus that can initiate the work of weaving
 and rendering the document.
\end_layout

\begin_layout Enumerate
Open an R session and make sure the working directory is the same as the
 project writeup.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rnw2pdf("skeleton.Rnw", engine = "Sweave")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Additional arguments can be used, mainly to control the verbosity of the
 output and the creation of subsidiary files.
 Our function, by default, will create and R file summary of the command
 chunks.
 This file is referred to as a 
\begin_inset Quotes eld
\end_inset

tangled
\begin_inset Quotes erd
\end_inset

 (if using knitr, it is referred to as a purled file).
 
\end_layout

\end_deeper
\begin_layout Enumerate
The shell script 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rnw2pdf.sh
\end_layout

\end_inset

 is provided in the same folder.
 It can be run in the shell as
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ./rnw2pdf.sh --engine='"Sweave"' skeleton.Rnw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The command script answers to all of the arguments followed by the R function
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rnw2pdf
\end_layout

\end_inset

.
 The usage is nearly identical.
 Where the R function call would be 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rnw2pdf("skeleton.Rnw", purl = FALSE, clean = FALSE, verbose = TRUE, keep_tex
 = TRUE)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the shell command would be
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ./rnw2pdf --purl=FALSE --clean=FALSE --keep_tex=TRUE --verbose=TRUE skeleton.Rnw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The only difference in usage arises when a quoted string must be passed
 through.
 Suppose the files are in a subdirectory named 
\begin_inset Quotes eld
\end_inset

project
\begin_inset Quotes erd
\end_inset

.
 Inside the R code, the quoted string to specify the directory where the
 file resides (the working directory) would be like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

rnw2pdf("skeleton.lyx", engine="Sweave" wd = "project")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
the shell command would be
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ ./rnw2pdf --engine='"Sweave"' --wd='"project"' skeleton.Rnw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note the single quotes that are protecting the double quotes.
\end_layout

\end_deeper
\begin_layout Enumerate
Our shell script is not the only way to use command line tools to get this
 done.
 One can run shell commands such as:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ R CMD Sweave skeleton.Rnw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That will create 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
skeleton.tex
\end_layout

\end_inset

, which we compile with
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ texi2pdf skeleton.tex
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The major difference between running this and the script we provide is that
 our script will handle LyX files and it will, by default, will create a
 purled copy of the R code.
\end_layout

\end_deeper
\begin_layout Standard
If you are editing these files in LyX, it is sufficient to simply compile
 as usual.
 That will handle the chore of converting a sequence of document types to
 arrive at PDF.
\end_layout

\begin_layout Section
Code Chunk Check
\end_layout

\begin_layout Standard
What is the difference between a guide and a report? Simply put, a report
 document does not reveal source code and it should not distract the reader
 with code or 
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 output.
 A report document might just as well be typed by hand, if we could be sure
 all the numbers would be typed correctly and they could easily revised.
 In our report style, the author will not generally insert visible code
 chunks, so almost always the chunk will have the flag `include=FALSE` or,
 if the chunk is included, the code will not be echoed, but perhaps a 
\backslash
LaTeX mark-up table or a figure may be placed into the document.
\end_layout

\begin_layout Standard
Our report documents ALMOST NEVER show 
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 R code to readers and very seldom will they display 
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 R output.
 Almost always, code chunks will have the flag 
\begin_inset Quotes eld
\end_inset

include=F
\begin_inset Quotes erd
\end_inset

 set and the document, when it reveals results, will, again, almost always,
 display a LaTeX formatted table that is placed inside a floating table
 or a figure that is placed inside a floating figure object.
\end_layout

\begin_layout Standard
It is a matter of style and author preference to decide how to include output
 within the report document.
 One approach is to use the chunk flags that directly display LaTeX output
 in the document.
 One must take special care to assure that the table is fully presentable.
 The alternative is to write the nearly presentable table on disk and then
 edit by hand to finalize the formats (usually we need to fix column and
 row names).
 
\end_layout

\begin_layout Subsection*
\begin_inset Flex Code
status open

\begin_layout Plain Layout
R
\end_layout

\end_inset

 Code Chunks
\end_layout

\begin_layout Standard
We use R 
\begin_inset CommandInset citation
LatexCommand citet
key "RCore"

\end_inset

 to do statistical analysis.
 We'd like to be as close as possible to the 
\begin_inset Quotes eld
\end_inset

reproducible document
\begin_inset Quotes erd
\end_inset

 idea.
 If R functions can produce perfectly presentable LaTeX output, then we
 use it.
 
\end_layout

\begin_layout Standard
On the other hand, one might write the output files and then manually insert
 them into the document.
 In our documents, we almost always have the global parameter `split=TRUE`,
 so that the code input and output chunks are saved in a directory we call
 `tmpout`.
 Another LaTeX document can insert those chunks.
 We will demonstrate that here.
\end_layout

\begin_layout Subsubsection*
One document-weaving tip: save something for later.
\end_layout

\begin_layout Standard
In the usual 
\begin_inset Quotes eld
\end_inset

weave
\begin_inset Quotes erd
\end_inset

 documentation, a user is told to type in a chunk and then the output plops
 into the document 
\begin_inset Quotes eld
\end_inset

right there
\begin_inset Quotes erd
\end_inset

.
 I don't use that so often anymore, instead what I do very often is a trick
 I learned from Duncan Murdoch in the r-help email list.
 
\end_layout

\begin_layout Standard
Make sure that the document options are set with 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
split=T
\end_layout

\end_inset

.
 This works in LaTeX documents using Sweave or knitr to handle the code
 chunks.
 This causes each chunk's input and output to be saved to a separate file.
 This includes graphs and tables.
 
\end_layout

\begin_layout Standard
If I make a figure, the chunk will look like this
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Rinput"
inline false
status open

\begin_layout Plain Layout

 <<chunkfig, eval=F, include=F, echo=F, fig=T>>=
\end_layout

\begin_layout Plain Layout

 # R code for figure here
\end_layout

\begin_layout Plain Layout

 @
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A file named 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
tmpout/t-chunkfig.pdf
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 will be created in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
tmpout
\end_layout

\end_inset

 directory.
 The 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
t-
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 at the front of the file name is inserted because in the document setup,
 I chose the global prefix for output files as 
\begin_inset Quotes eld
\end_inset

t-
\begin_inset Quotes erd
\end_inset

.
 (Because documents can have different prefixes, it is possible then to
 have several R programs that output files into the same output folder.
 But I rarely do that because I don't want to get too confused about what
 file came from which program.) To insert that graphic in the document, I
 will write a LaTeX statement
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Rinput"
inline false
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=5in]{tmpout/t-chunkfig}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note I don't put 
\begin_inset Quotes eld
\end_inset

.pdf
\begin_inset Quotes erd
\end_inset

 on the end of the file name, LaTeX finds the file named 
\begin_inset Quotes eld
\end_inset

t-chunkfig.pdf
\begin_inset Quotes erd
\end_inset

.
 I could use the LyX pull down Insert -> Graphics as well.
\end_layout

\begin_layout Standard
If the code makes a LaTeX table, I'll have this instead
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Rinput"
inline false
status open

\begin_layout Plain Layout

 <<chunktable, include=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

 # R code here
\end_layout

\begin_layout Plain Layout

 @
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That creates a file named 
\begin_inset Quotes eld
\end_inset

tmpout/t-chunktable.tex
\begin_inset Quotes erd
\end_inset

.
 Then put that into the document where you want with: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "style=Rinput"
inline false
status open

\begin_layout Plain Layout

 
\backslash
input{tmpout/t-chunktable.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Why do this? Why separate chunk output creation from inclusion in a document?
 The simple answer is that I might want to use that chunk in a different
 document.
 If I save a copy in the separate folder, then it is very convenient to
 come along later and make a separate slide show document displaying the
 same tables and/or figures.
 Or I might need to edit the chunk output before inserting it in the document.
  
\end_layout

\begin_layout Standard
The automatic 
\begin_inset Quotes eld
\end_inset

stick this output in where the chunk is placed
\begin_inset Quotes erd
\end_inset

 approach works great with lecture notes and guides because these things
 are easy to update and re-run.
\end_layout

\begin_layout Subsection*
Make Nice Looking Tables
\end_layout

\begin_layout Standard
The aim in R code is to generate 
\begin_inset Quotes eld
\end_inset

final
\begin_inset Quotes erd
\end_inset

 tables that are in LaTeX format and they are as close as possible to the
 final, presentable tables that a client can review in a report.
 We don't want the report reader to see ugly output:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Rsummary, echo=F>>=
\end_layout

\begin_layout Plain Layout

dat <- data.frame(x = rnorm(100), y = rnorm(100))
\end_layout

\begin_layout Plain Layout

summary(dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In R, there are many (many!) packages and functions that can be used to
 generate acceptable LaTeX output.
 The bewildering diversity of these things is a problem.
 There are a host of packages that generate results that are nearly presentable,
 perhaps requiring only a minor adjustment of labels.
\end_layout

\begin_layout Subsubsection*
Summary statistics tables
\end_layout

\begin_layout Subsubsection*
xtable
\end_layout

\begin_layout Standard
Here is an example that uses rockchalk::summarize to gather summary statistics,
 which are then reformatted as a LaTeX table by xtable.
 Here's an xtable that displays most of the rows in the output from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rockchalk::summarizeNumerics
\end_layout

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab0, results=hide>>=
\end_layout

\begin_layout Plain Layout

tab1 <- rockchalk::summarize(dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab1, echo=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

tab1.x <- xtable::xtable(tab1$numericsfmt)
\end_layout

\begin_layout Plain Layout

print(tab1.x, floating = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To regulate the values in the rows, it is possible to choose explicitly,
 but the summarize function in rockchalk was revised to allow uses to more
 easily pin-point particular summary values.
\end_layout

\begin_layout Standard
It may be that people want the output rotated, so that the variable names
 are on the rows and the summary stats are in the columns.
 That's possible:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab3, echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

tab3.x <- xtable::xtable(tab1$numerics)
\end_layout

\begin_layout Plain Layout

print(tab3.x, floating = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The key issue is that the table is not perfectly ready for inclusion in
 a report.
 The row and column names might need beautification.
 That is why, realistically, it is generally easier to write those tables
 into tex files and revise them by hand, and then use LaTeX 
\begin_inset Quotes eld
\end_inset


\backslash
input{}
\begin_inset Quotes erd
\end_inset

 to include them in the document where appropriate.
\end_layout

\begin_layout Subsubsection*
knitr::kable
\end_layout

\begin_layout Standard
The following is a result from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kable
\end_layout

\end_inset

 in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
knitr
\end_layout

\end_inset

 package:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab4, echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

tab4.x <- knitr::kable(tab1$numerics, format = "latex")
\end_layout

\begin_layout Plain Layout

## keep file copy because vignette cannot use split
\end_layout

\begin_layout Plain Layout

cat(tab4.x, file = "tmpout/t-tab4.tex") 
\end_layout

\begin_layout Plain Layout

cat(tab4.x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kable
\end_layout

\end_inset

 function is offered as a simple, usually robust table writer that will
 not deal with much 
\begin_inset Quotes eld
\end_inset

fancy
\begin_inset Quotes erd
\end_inset

 formatting.
 .
\end_layout

\begin_layout Standard
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kable
\end_layout

\end_inset

 function assumes that if the user specifies a title for the table, then
 it must mean that the user wants to have the table set as a floating table
 object.
 The same code that made the previous table is changed just slightly to
 produce a floating object.
 Look around in this document for a table named 
\begin_inset Quotes eld
\end_inset

In 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kable
\end_layout

\end_inset

, I added the caption argument and got this unexpected float
\begin_inset Quotes erd
\end_inset

.
 (I found this frustrating because the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kable
\end_layout

\end_inset

 function does not include documentation for insertion of a label that can
 be used for cross referencing.)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab5, echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

tab5.x <- knitr::kable(tab1$numerics, format = "latex", caption = "In kable,
 I added the caption argument and got this unexpected float")
\end_layout

\begin_layout Plain Layout

cat(tab5.x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I'd rather not have kable insert the table float for me, I'd rather do it
 manually, as we can see in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:kable-output"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
kable output in a float I created manually
\begin_inset CommandInset label
LatexCommand label
name "tab:kable-output"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-tab4.tex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Regression output
\end_layout

\begin_layout Standard
I'll illustrate output from the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
outreg
\end_layout

\end_inset

 function in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rockchalk
\end_layout

\end_inset

 package.
 This table may not be perfect by APA standards, but it is certainly good
 enough for our reports.
 We estimate a regression and save the LaTeX markup in a file named 
\begin_inset Quotes eld
\end_inset

tmpout/t-outreg1.tex
\begin_inset Quotes erd
\end_inset

.
 (This approach is necessary in this document because it is a vignette in
 the stationery package and the split=TRUE flag is not allowed in vignettes
 for packages on CRAN).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg1, results=hide>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x, data = dat)
\end_layout

\begin_layout Plain Layout

vl <- c("x" = "Excellent Predictor")
\end_layout

\begin_layout Plain Layout

or <- outreg(list("First Model" = m1), varLabels = vl, tight = FALSE)
\end_layout

\begin_layout Plain Layout

cat(or, file="tmpout/t-outreg1.tex")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After the file is created, we then incorporate it in the usual way, embedding
 it in a floating object, Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:A-Regression"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Regression from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
outreg
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tab:A-Regression"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-outreg1.tex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are many other regression-table-making functions available today.
 I made some lecture notes about it for the R summer workshops that we offer
 at KU (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://pj.freefaculty.org/guides/Rcourse/regression-tables-1
\end_layout

\end_inset

).
 
\end_layout

\begin_layout Subsection*
Structural equation models
\end_layout

\begin_layout Standard
In the good looking table department, we also need to display structural
 equation models.
 This has been a long term objective in CRMDA and it is, for the most part,
 a solved problem.
 
\end_layout

\begin_layout Standard
In the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kutils
\end_layout

\end_inset

 package, we made a function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
semTable
\end_layout

\end_inset

 that is intended to help.
 Please see Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:A-Confirmatory-Factor"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

require(lavaan)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cfa1, echo=F, include=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

HS.model <- 'visual  =~ x1 + x2 + x3
\end_layout

\begin_layout Plain Layout

textual =~ x4 + x5 + x6
\end_layout

\begin_layout Plain Layout

speed   =~ x7 + x8 + x9'
\end_layout

\begin_layout Plain Layout

output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
\end_layout

\begin_layout Plain Layout

cfa1 <- semTable(output1, fits = "rmsea", paramSets = c("loadings", "latentvaria
nces"), type = "latex")
\end_layout

\begin_layout Plain Layout

cat(cfa1, file = "tmpout/t-cfa1.tex")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Confirmatory Factor Analysis Table
\begin_inset CommandInset label
LatexCommand label
name "tab:A-Confirmatory-Factor"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-cfa1.tex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Session Information
\end_layout

\begin_layout Standard
Leave the code chunks below.
 But the visible words and section name should be removed.
 Session Information is usually not written into a report, but an output
 file is created by the following pieces.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<session, include=F>>=
\end_layout

\begin_layout Plain Layout

zz <- "report-instructions.Rout"
\end_layout

\begin_layout Plain Layout

capture.output(sessionInfo(), file = zz, append = FALSE)
\end_layout

\begin_layout Plain Layout

if (!is.null(warnings())){
\end_layout

\begin_layout Plain Layout

    capture.output(warnings(), file = zz, append = TRUE)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<RoptionsRestore, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

par(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "theme/mlm"
options "apalike2"

\end_inset


\end_layout

\end_body
\end_document
