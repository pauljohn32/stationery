#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
% \VignetteIndexEntry{rnw2pdf-report-knit}
% \VignetteEngine{knitr}
% \VignetteBuilder{stationery::rnw2pdf}


\usepackage[includehead,includefoot,
margin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

\usepackage{multicol}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{xcolor}
\usepackage[yyyymmdd,hhmmss]{datetime}

\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{multicol}

%% PJ 20161110
%% I want to use listings in the document and I want nice/same as knitr.
%% Does knitr provide all of these settings for other listing uses outside
%% weaved part?


\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
%% Load Hyperref, don't let LyX do this
\input{theme/reportPreambleKnitr.tex}
\end_preamble
\use_default_options false
\begin_modules
logicalmkup
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\branch R
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout

%% Fill in values of the arguments here, 
\end_layout

\begin_layout Plain Layout

%% If blanks are needed, must insert value " ~ "
\end_layout

\begin_layout Plain Layout

%% If comma needed inside value, wrap in {}.
\end_layout

\begin_layout Plain Layout

%% Delete secondauthor and thirdauthor if not needed
\end_layout

\begin_layout Plain Layout


\backslash
reportsetup{%
\end_layout

\begin_layout Plain Layout

  firstauthor={
\end_layout

\begin_layout Plain Layout

    lastname=Johnson,
\end_layout

\begin_layout Plain Layout

    firstname=Paul~E., 
\end_layout

\begin_layout Plain Layout

    affiliation=Director{,}~CRMDA,
\end_layout

\begin_layout Plain Layout

    email=first@ku.edu},
\end_layout

\begin_layout Plain Layout

 secondauthor={
\end_layout

\begin_layout Plain Layout

    lastname=Sullivan, 
\end_layout

\begin_layout Plain Layout

    firstname=Meghan, 
\end_layout

\begin_layout Plain Layout

    affiliation=CRMDA, 
\end_layout

\begin_layout Plain Layout

    email=second@ku.edu},
\end_layout

\begin_layout Plain Layout

  title={Instructions for rnw2pdf reports with knitted chunks},
\end_layout

\begin_layout Plain Layout

  rightlogo={theme/logo.pdf},
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
reporthdr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=FALSE, family="Times", pointsize=10)
\end_layout

\begin_layout Plain Layout

if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<knitr10, include=FALSE, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(knitr)
\end_layout

\begin_layout Plain Layout

opts_chunk$set(fig.path='tmpout/t-', split=FALSE, ae=FALSE, comment=NA,
\end_layout

\begin_layout Plain Layout

               fig.height=5, fig.width=6)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang american
\begin_inset ERT
status open

\begin_layout Plain Layout

<<texcopy, include=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(stationery)
\end_layout

\begin_layout Plain Layout

## If theme directory does not have required images or TeX files
\end_layout

\begin_layout Plain Layout

## we need to retrieve them and put them in "theme" directory.
 
\end_layout

\begin_layout Plain Layout

logos <- c(logoright = "logo.pdf", "addressFooter.tex")
\end_layout

\begin_layout Plain Layout

texfiles <- c("reportPreambleHeader.tex", 
\end_layout

\begin_layout Plain Layout

              "preambleFooter.tex", 
\end_layout

\begin_layout Plain Layout

              "reportPreambleKnitr.tex")
\end_layout

\begin_layout Plain Layout

getFiles(logos, pkg = "stationery")
\end_layout

\begin_layout Plain Layout

getFiles(texfiles, pkg = "stationery")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
This is a LaTeX 
\begin_inset Quotes eld
\end_inset

noweb
\begin_inset Quotes erd
\end_inset

 report generated with the knitr engine.
 We had a working document using Sweave and the listings class (via the
 Sweavel LaTeX package).
 This is migrated from that to use knitr.
 Some elements are still not well integrated, it is very tough for me to
 be sure which argument in the preamble are actually relevant to knitr and
 which are relevant to listings by itself.
\end_layout

\begin_layout Standard
This shows how we use R 
\begin_inset CommandInset citation
LatexCommand citep
key "RCore"

\end_inset

 to make report documents using the CRMDA style.
 
\end_layout

\begin_layout Standard
We suggest you
\end_layout

\begin_layout Enumerate
Compile this document 
\emph on
./rnw2pdf.sh --tangle=FALSE --engine='"knitr"' instructions-rnw2pdf-report-knit.Rnw
as is 
\emph default
to test your setup
\end_layout

\begin_layout Enumerate
Compare the document with the pdf output so see the impact of the settings.
\end_layout

\begin_layout Standard
Do put your title & name in the top block.
\end_layout

\begin_layout Standard
Don't change the code chunks above or the last chunks below.
\end_layout

\begin_layout Standard
For what it is worth, we have found that the knitr framework is not so easy
 to customize and manage as Sweave and, if you are planning to produce a
 PDF document, it seems likely that the
\end_layout

\begin_layout Section
LyX: Cautions
\end_layout

\begin_layout Standard
The document preamble has manual settings for margins (geometry) as well
 as hyperlinks (PDF hyperref).
 Don't use the LyX pull down menu to revise them.
 It is necessary to edit settings in the preamble manually.
 
\end_layout

\begin_layout Standard
Don't change margins or geometry with Lyx pull down menus.
 Edit preamble or config files for that.
 Repeat 
\series bold
CAUTION
\series default
: Dont change the page margins or settings for hyperlinks with pull down
 menus.
\end_layout

\begin_layout Section
What to edit
\end_layout

\begin_layout Section*
Title and author information
\end_layout

\begin_layout Standard
The first block in the document has the title and author information.
\end_layout

\begin_layout Subsection*
Footer information
\end_layout

\begin_layout Standard
The footer in this document uses data that is provided in a file named 
\begin_inset Quotes eld
\end_inset

addressFooter.tex
\begin_inset Quotes erd
\end_inset

.
 After the document is compiled for the first time, that document should
 be available in the theme folder.
\end_layout

\begin_layout Subsection*
About the theme folder
\end_layout

\begin_layout Standard
The theme folder should be empty when the initProject() function is run.
 
\end_layout

\begin_layout Standard
There is an R code chunk above called 
\begin_inset Quotes eld
\end_inset

texcopy
\begin_inset Quotes erd
\end_inset

.
 It will copy configuration files from the package into the theme folder.
 After running this for the first time, those files will not be automatically
 replaced by the scripts.
 
\end_layout

\begin_layout Standard
That means authors are free to edit them to fit their needs.
\end_layout

\begin_layout Standard
If the author makes an error in editing a theme file, it is safe to delete
 the erroneous file and run the compile script again.
 That will copy a fresh version of the theme file into the directory.
\end_layout

\begin_layout Section
Check our documentation
\end_layout

\begin_layout Standard
There are several vignettes distributed with this package.
 Please review them.
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

crmda
\begin_inset Quotes erd
\end_inset

: the package framework overview
\end_layout

\begin_layout Enumerate
\begin_inset Quotes eld
\end_inset

code_chunks
\begin_inset Quotes erd
\end_inset

: discusses display of code in LaTeX documents
\end_layout

\begin_layout Section
Compile as usual, or with rnw2pdf
\end_layout

\begin_layout Standard
If you are editing these files in LyX, it is sufficient to simply compile
 as usual.
 That will handle the chore of converting a sequence of document types to
 arrive at PDF.
\end_layout

\begin_layout Standard
If not using LyX, then the author is probably editing the Rnw file.
 The Rnw file we provide is produced by LyX, it is an intermediate step
 in the document production sequence.
 A two step compilation procedure is necessary.
 First, one must convert the 
\begin_inset Quotes eld
\end_inset

Rnw
\begin_inset Quotes erd
\end_inset

 file to 
\begin_inset Quotes eld
\end_inset

pdf
\begin_inset Quotes erd
\end_inset

 (with knit), and then the knitted tex file is compiled into pdf by pdflatex
 (or one of the other LaTeX compilers).
 
\end_layout

\begin_layout Standard
We provide a shell script that can handle this, 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{rnw2pdf.sh}
\end_layout

\end_inset

 script (which is included with the skeleton file).
 It is also possible to use our R function 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
code{rnw2pdf}
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Code Chunk Check
\end_layout

\begin_layout Standard
The syntax for knitr code chunks is slightly different than the syntax for
 Sweave chunks.
 Many of the options are identical.
 The syntax for a code chunk in both cases is like so
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

< <chunkname, eval=T, include=T, echo=T>>=
\end_layout

\begin_layout Plain Layout

# R code here
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
T
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 stands for TRUE and it can be changed to 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
F
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 for FALSE.
 These are explained in the vignette 
\begin_inset Quotes eld
\end_inset

code_chunks
\begin_inset Quotes erd
\end_inset

.
 Briefly:
\end_layout

\begin_layout Description
1.
\begin_inset space ~
\end_inset

echo: when the chunk is processed, the R code will be displayed along with
 the output
\end_layout

\begin_layout Description
2.
\begin_inset space ~
\end_inset

include: the chunk is evaluated, but neither the echo nor the results are
 displayed
\end_layout

\begin_layout Description
3.
\begin_inset space ~
\end_inset

eval: if F, the chunk is not sent to the R session, but it is checked for
 correctness of code at compile time.
\end_layout

\begin_layout Standard
The difference with knitr is partly due to a larger set of legal flags but
 also because knitr provides different functions to handle the document
 processing.
 One benefit of knitr is that, at least in theory, it can be used to write
 about other kinds of programs.
 I've used it to write about the BASH shell, for example.
 
\end_layout

\begin_layout Subsection*
Reports and the Non-use of Code Chunks
\end_layout

\begin_layout Standard
Here is the main issue.
 The 
\begin_inset Quotes eld
\end_inset

automatic
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

self-documenting
\begin_inset Quotes erd
\end_inset

 report is almost never exactly correct.
 It requires some 
\begin_inset Quotes eld
\end_inset

finger painting
\begin_inset Quotes erd
\end_inset

.
 Perhaps that would not be true in the perfect world, if we were perfect
 programmers, but I don't live in a perfect world.
 In that case, I am willing to settle for a very good second best alternative.
 I have learned to export result files from R which can be included in documents
 easily, so the documents are easily updated and revised.
 They may not be completely automatic because I leave open the possibility
 that I might need to adjust a figure's size or a part of a table's markup.
\end_layout

\begin_layout Standard
The magic bullet in that is the 
\begin_inset Quotes eld
\end_inset

split
\begin_inset Quotes erd
\end_inset

 option for Sweave, which knitr for LaTeX also supports.
 If split=T, then the individual code chunks and their results are saved
 in separate files.
 Here we save them in a directory called 
\begin_inset Quotes eld
\end_inset

tmpout
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
What is the difference between a guide and a report? Simply put, a report
 document does not reveal source code and it should not distract the reader
 with code.
 A report document might just as well be typed by hand, if we could be sure
 all the numbers would be typed correctly and they could easily revised.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<m1, include=F>>=
\end_layout

\begin_layout Plain Layout

dat <- data.frame(x = rnorm(100), y = rnorm(100))
\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x, data = dat)
\end_layout

\begin_layout Plain Layout

summary(m1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In a report, we do not usually have R output in the raw form as you see
 above.
\end_layout

\begin_layout Standard
That is output from knitr's code decoration setup, incidentally.
 I'd rather not have the color coded R code and I don't want light gray
 output.
 Those are settings we need to fix before we go much further down this road.
\end_layout

\begin_layout Standard
In a report, we do not want R code or output, we want a professional-looking
 table.
 This table may not be perfect by APA standards, but it is certainly good
 enough for our reports.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg1, echo=F, results='asis'>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

vl <- c("x" = "Excellent Predictor")
\end_layout

\begin_layout Plain Layout

or <- outreg(list("First Model" = m1), varLabels = vl, tight = FALSE)
\end_layout

\begin_layout Plain Layout

cat(or)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the kutils package, we made a function semTable that is intended to help
 with nice looking.
 Usually, we want a bigger table in a floating element.
 Please see Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:A-Confirmatory-Factor"

\end_inset

.
 In the preamble of this document, I have some boilerplate code that causes
 content in floating tables and figures to be centered automatically.
 This looks nice!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

require(lavaan)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cfa1, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

HS.model <- 'visual  =~ x1 + x2 + x3
\end_layout

\begin_layout Plain Layout

textual =~ x4 + x5 + x6
\end_layout

\begin_layout Plain Layout

speed   =~ x7 + x8 + x9'
\end_layout

\begin_layout Plain Layout

output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cfa3, echo=F, include=F, results='asis'>>=
\end_layout

\begin_layout Plain Layout

cfa1 <- semTable(output1, fits = "rmsea", paramSets = c("loadings", "latentvaria
nces"), type = "latex")
\end_layout

\begin_layout Plain Layout

cat(cfa1, file="tmpout/t-cfa3.tex")
\end_layout

\begin_layout Plain Layout

cat(cfa1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Confirmatory Factor Analysis Table
\begin_inset CommandInset label
LatexCommand label
name "tab:A-Confirmatory-Factor"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-cfa3.tex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Session Information
\end_layout

\begin_layout Standard
Leave the code chunks below.
 But the visible words and section name should be removed.
 Session Information is usually not written into a report, but an output
 file is created by the following pieces.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<session, include=F>>=
\end_layout

\begin_layout Plain Layout

zz <- gsub("Rnw", "Rout", knitr::current_input())
\end_layout

\begin_layout Plain Layout

capture.output(sessionInfo(), file = zz, append = FALSE)
\end_layout

\begin_layout Plain Layout

if (!is.null(warnings())){
\end_layout

\begin_layout Plain Layout

    capture.output(warnings(), file = zz, append = TRUE)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<RoptionsRestore, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
