#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
\usepackage{Sweavel}
\usepackage[includehead,includefoot]{geometry}
\geometry{
lmargin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
}

\usepackage{multicol}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{color}
\usepackage[yyyymmdd,hhmmss]{datetime}
\lstset{tabsize=2, breaklines=true, 
  breakatwhitespace=true,
  %language=R,
  captionpos=b,
  frame=single,
  framerule=0.2pt,
  framesep=1pt,
  numbersep=5pt,
  showstringspaces=false,
  basicstyle=\footnotesize,
  identifierstyle=,
  keywordstyle=\bfseries,
  commentstyle=\color{darkgreen},
  stringstyle=,
  backgroundcolor=\color[gray]{0.935}
}
\usepackage{fancyhdr}
\usepackage{lastpage}
\usepackage{babel}
% Now fancy header/footer settings
\lhead{}
\chead{}
\rhead{}
\renewcommand{\headrulewidth}{0pt}
\lfoot{}
\cfoot{{Page} \thepage { of} \pageref{LastPage}}
\rfoot{}

\fancypagestyle{firststyle}
{
\lfoot{}
%\cfoot{{Page} \thepage { of} \pageref{LastPage}}
\cfoot{}
\rfoot{}
\renewcommand{\headrulewidth}{0pt}
\fancyfoot[L]{1425 Jayhawk Blvd.\\470 Watson Library\\ Lawrence, KS 66045-7555}
\fancyfoot[R]{Phone: 785-864-3353\\ Website: crmda.ku.edu\\ Email: crmda@ku.edu}
\renewcommand{\footrulewidth}{.1pt}
}

\pagestyle{fancy}


%graphics and such inside floats are centered by default
\renewenvironment{figure}[1][]{%
 \ifthenelse{\equal{#1}{}}{%
   \@float{figure}
 }{%
   \@float{figure}[#1]%
 }%
 \centering
}{%
 \end@float
}
\renewenvironment{table}[1][]{%
 \ifthenelse{\equal{#1}{}}{%
   \@float{table}
 }{%
   \@float{table}[#1]%
 }%

 \centering
%  \setlength{\@tempdima}{\abovecaptionskip}%
%  \setlength{\abovecaptionskip}{\belowcaptionskip}%
% \setlength{\belowcaptionskip}{\@tempdima}%
}{%
 \end@float
}

\thispagestyle{firststyle}

\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{multicol}
\usepackage{graphicx}

%% PJ 20161110
%% I want to use listings in the document and I want nice/same as knitr.
%% Does knitr provide all of these settings for other listing uses outside
%% weaved part?
\usepackage{fancyvrb}
\fvset{listparameters={\setlength{\topsep}{0em}}}
\usepackage{listings}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}
\providecommand{\Rcolor}{\color[rgb]{0, 0.5, 0.5}}
%%\providecommand{\Routcolor}{\color[rgb]{0.461, 0.039, 0.102}}
\providecommand{\Routcolor}{\color[rgb]{1.0, 0.0, 0.0}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.043, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.95}}
\providecommand{\Routbackground}{\color[gray]{0.80}}
% Can specify \color[gray]{1} for white background or just \color{white}


\lstdefinestyle{Rstyle}{fancyvrb=false,
                        frame=none,
                        escapechar=`,
                        language=R,%
                        basicstyle={\Rcolor\Sweavesize},%
                        backgroundcolor=\Rbackground,%
                        showstringspaces=false,%
                        keywordstyle=\Rcolor,%
                        commentstyle={\Rcommentcolor\ttfamily\itshape},%
                        literate={<-}{{$\leftarrow$}}2{<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$^{\scriptstyle\wedge}$}}1,%
                        alsoother={$},%
                        alsoletter={.<-},%
                        otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                        escapeinside={(*}{*)}}%

\lstset{tabsize=2, breaklines=true, style=Rstyle}
\end_preamble
\use_default_options false
\begin_modules
logicalmkup
sweave
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\branch R
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="top">
<column alignment="left" valignment="top" width="4in">
<column alignment="center" valignment="top" width="2.25in">
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Plain Layout

\shape smallcaps
\size larger
Title of this Document: A Subtitle that may Flow onto Additional Space if
 Necessary
\end_layout

\begin_layout Plain Layout
\noindent

\end_layout

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename theme/CRMDA_logo.pdf
	width 2in

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" topline="true" bottomline="true" usebox="none" width="5in">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset VSpace defskip
\end_inset

Your Name Here, Your Title, CRMDA
\end_layout

\begin_layout Plain Layout
<your_email@ku.edu>
\end_layout

\begin_layout Plain Layout
Other author names here, Title, CRMDA
\end_layout

\begin_layout Plain Layout
<their_email@ku.edu>
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
Will insert correct date.
 Replace following if you want fixed date.
 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent
\align left

\series bold
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset VSpace medskip
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<echo=F>>=
\end_layout

\begin_layout Plain Layout

if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% In document Latex options:
\end_layout

\begin_layout Plain Layout


\backslash
fvset{listparameters={
\backslash
setlength{
\backslash
topsep}{0em}}}
\end_layout

\begin_layout Plain Layout


\backslash
SweaveOpts{prefix.string=tmpout/t,split=TRUE,ae=FALSE,height=5,width=6}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

par.orig <- par(no.readonly=TRUE) 
\end_layout

\begin_layout Plain Layout

pjmar <- c(5.1, 5.1, 1.5, 2.1) 
\end_layout

\begin_layout Plain Layout

options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=10)))
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=FALSE, family="Times", pointsize=10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a LaTeX 
\begin_inset Quotes eld
\end_inset

noweb
\begin_inset Quotes erd
\end_inset

 report generated with the sweave engine.
 We compare it to the very similar document produced with 
\begin_inset Quotes eld
\end_inset

knitr
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Some elements are still not well integrated.
 Going between 
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 LaTeX, knitr, and Sweave is sometimes confusing.
\end_layout

\begin_layout Standard
The syntax for knitr code chunks is only slightly different than the syntax
 for Sweave chunks.
 Many of the options are identical.
 The syntax for a code chunk in both cases is like so
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

$<<$chunkname, eval=TorF, include=TorF, echo=TorF$>>=$
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
# R code here
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where by 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
TorF
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 I mean you can choose either T or F.
 These arguments are allowed in either knitr or Sweave, they are the ones
 I use most often.
 Briefly:
\end_layout

\begin_layout Description
1.
\begin_inset space ~
\end_inset

echo: when the chunk is processed, the R code will be displayed along with
 the output
\end_layout

\begin_layout Description
2.
\begin_inset space ~
\end_inset

include: the chunk is evaluated, but neither the echo nor the results are
 displayed
\end_layout

\begin_layout Description
3.
\begin_inset space ~
\end_inset

eval: if F, the chunk is not sent to the R session, but it is checked for
 correctness of code at compile time.
\end_layout

\begin_layout Standard
The difference with knitr is partly due to a larger set of legal flags but
 also because knitr provides different functions to handle the document
 processing.
 One benefit of knitr is that, at least in theory, it can be used to write
 about other kinds of programs.
 I've used it to write about the BASH shell, for example.
 
\end_layout

\begin_layout Standard

\series bold
CAUTION
\series default
: This template document has some special features in the preamble.
 Most importantly, it has margins that are set.
 The LyX graphical menu (Document -> Settings -> margins) will break these
 defaults.
 So don't change the page margins or the pagestyle.
 Other than that, I don't know of any settings that are fatal.
\end_layout

\begin_layout Standard
Over the years, I have benefitted a great deal from the 
\begin_inset Quotes eld
\end_inset

automatic document with integrated results
\begin_inset Quotes erd
\end_inset

 from Sweave.
 I have found this most beneficial in the preparation of course notes and
 slides.
 
\end_layout

\begin_layout Standard
I do not find it quite so beneficial in the preparation of reports.
 Here is the main issue.
 The 
\begin_inset Quotes eld
\end_inset

automatic
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

self-documenting
\begin_inset Quotes erd
\end_inset

 report is almost never exactly correct.
 It requires some 
\begin_inset Quotes eld
\end_inset

finger painting
\begin_inset Quotes erd
\end_inset

.
 Perhaps that would not be true in the perfect world, if we were perfect
 programmers, but I don't live in a perfect world.
 In that case, I am willing to settle for a very good second best alternative.
 I have learned to export result files from R which can be included in documents
 easily, so the documents are easily updated and revised.
 They may not be completely automatic because I leave open the possibility
 that I might need to adjust a figure's size or a part of a table's markup.
\end_layout

\begin_layout Standard
The magic bullet in that is the 
\begin_inset Quotes eld
\end_inset

split
\begin_inset Quotes erd
\end_inset

 option for Sweave, which knitr for LaTeX also supports.
 If split=T, then the individual code chunks and their results are saved
 in separate files.
 Here we save them in a directory called 
\begin_inset Quotes eld
\end_inset

tmpout
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
What is the difference between a guide and a report? Simply put, a report
 document does not reveal source code and it should not distract the reader
 with code.
 A report document might just as well be typed by hand, if we could be sure
 all the numbers would be typed correctly and they could easily revised.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<m1, include=F>>=
\end_layout

\begin_layout Plain Layout

dat <- data.frame(x = rnorm(100), y = rnorm(100))
\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x, data = dat)
\end_layout

\begin_layout Plain Layout

summary(m1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In a report, we do not usually have R output in the raw form, or even in
 the beautified form from Sweavel:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-m1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The knitr settings we use also use the listings class to beautify these
 chunk outputs, but the style is different because of the settings in the
 LaTeX Sweavel file and the settings in the preamble of this document.
\end_layout

\begin_layout Standard
In a report, we do not want R code or output, we want a professional-looking
 table.
 This table may not be perfect by APA standards, but it is certainly good
 enough for our reports.
 If we drop this output into the text, without inserting it into a float,
 we obtain the following
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg1, echo=F, results=tex>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

vl <- c("x" = "Excellent Predictor")
\end_layout

\begin_layout Plain Layout

outreg(list("First Model" = m1), varLabels = vl, tight = FALSE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
One of the truly important differences between Sweave chunks and knitr chunks
 is the 
\begin_inset Quotes eld
\end_inset

results
\begin_inset Quotes erd
\end_inset

 argument.
 For Sweave, we need 
\begin_inset Quotes eld
\end_inset

results='tex'
\begin_inset Quotes erd
\end_inset

 but for knitr they changed this to 
\begin_inset Quotes eld
\end_inset

results='asis'
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Regression
\begin_inset CommandInset label
LatexCommand label
name "tab:A-Regression"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-outreg1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We could instead insert the same into a floating object, as illustrated
 in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:A-Regression"

\end_inset

.
\end_layout

\begin_layout Standard
We are using the listings class to display input and output chunks.
 In a perfect world, we'd be able to insert a listings environment and the
 output would look like an Sweaved chunk.
 
\end_layout

\begin_layout Standard
Lets compare! This is not Sweaved, it is simply a LaTeX listings environment
 colored by the settings in the preamble
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x <- rnorm(100)
\end_layout

\begin_layout Plain Layout

y <- rpois(100, lambda = 2)
\end_layout

\begin_layout Plain Layout

plot(y ~ x)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In comparison, this is a code chunk that is not evaluated, but it is displayed
 in the document.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<listingcompare, eval=F,echo=T>>=
\end_layout

\begin_layout Plain Layout

x <- rnorm(100)
\end_layout

\begin_layout Plain Layout

y <- rpois(100, lambda = 2)
\end_layout

\begin_layout Plain Layout

plot(y ~ x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Those match very closely because I understand the listings settings better
 with Sweavel, whereas in the knitr example it is not as good.
\end_layout

\begin_layout Standard
In the preparation of a report, we then need to do some work to find a high
 quality table-manufacturing function.
 We don't want to see an R summary (ugly as it is):
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Rsummary, echo=F>>=
\end_layout

\begin_layout Plain Layout

summary(dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We don't have a great summary stats table maker now, but if I were doing
 one, I'd probably start with the rockchalk::summarize function and beautify
 that.
 It is easy enough to use the xtable package to get this done.
 Here's a relatively more elaborate table:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab1, echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

tab1 <- rockchalk::summarizeNumerics(dat)
\end_layout

\begin_layout Plain Layout

tab1.x <- xtable::xtable(tab1[c(1:7,9,10,12) , ])
\end_layout

\begin_layout Plain Layout

print(tab1.x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Perhaps we do not want the quantiles
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab2, echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

tab2.x <- xtable::xtable(tab1[c(6:7,9,10,12) , ])
\end_layout

\begin_layout Plain Layout

print(tab2.x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It may be that people want the output rotated, so that the variable names
 are on the rows and the summary stats are in the columns.
 That's possible:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<tab3, echo=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

tab3.x <- xtable::xtable(t(tab1[c(6:7,9,10,12) , ]))
\end_layout

\begin_layout Plain Layout

print(tab3.x)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Row names and column names need to be beautified, that's for sure.
 I suppose the point here is not that I can throw together an adequate table
 in 10 minutes.
 But rather that if we are making a report, we need some kind of good looking
 table.
 I used xtable to do this, but that's only because it is the oldest package
 for that purpose and I know how to use it.
 There are newer R-to-LaTeX table making functions floating about.
\end_layout

\begin_layout Standard
In the good looking table department, we also need to display structural
 equation models.
 This has been a long term objective in CRMDA.
 In the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
kutils
\end_layout

\end_inset

 package, we made a function 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
cfaTable
\end_layout

\end_inset

 that is intended to help with nice looking.
 Usually, we want a bigger table in a floating element.
 Please see Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:A-Confirmatory-Factor"

\end_inset

.
 In the preamble of this document, I have some boilerplate code that causes
 content in floating tables and figures to be centered automatically.
 This looks nice!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

require(lavaan)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cfa1, echo=F, include=F,results=tex>>=
\end_layout

\begin_layout Plain Layout

HS.model <- 'visual  =~ x1 + x2 + x3
\end_layout

\begin_layout Plain Layout

textual =~ x4 + x5 + x6
\end_layout

\begin_layout Plain Layout

speed   =~ x7 + x8 + x9'
\end_layout

\begin_layout Plain Layout

output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
\end_layout

\begin_layout Plain Layout

cfa1 <- cfaTable(output1, fit = "rmsea", standardized = TRUE, params = c("loadin
gs", "latentvariances"), type = "latex")
\end_layout

\begin_layout Plain Layout

cat(cfa1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Confirmatory Factor Analysis Table
\begin_inset CommandInset label
LatexCommand label
name "tab:A-Confirmatory-Factor"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-cfa1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
One document-weaving tip for the road
\end_layout

\begin_layout Standard
In the usual 
\begin_inset Quotes eld
\end_inset

weave
\begin_inset Quotes erd
\end_inset

 documentation, a user is told to type in a chunk and then the output plops
 into the document 
\begin_inset Quotes eld
\end_inset

right there
\begin_inset Quotes erd
\end_inset

.
 I don't use that so often anymore, instead what I do very often is a trick
 I learned from Duncan Murdoch in the r-help email list.
 
\end_layout

\begin_layout Standard
Make sure that the document is set with split=T, so that each chunk's output
 is saved to a file.
 This includes graphs and tables.
 So when I run a function that generates a graph, I get a pdf output file
 in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
tmpout
\end_layout

\end_inset

 folder.
 
\end_layout

\begin_layout Standard
If I make a figure, the chunk will look like this
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

$<<$chunkfig, include=F, echo=F, fig=T$>>=$
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
# R code for figure here
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A file name 
\begin_inset Quotes eld
\end_inset

tmpout/t-chunkfig.pdf
\begin_inset Quotes erd
\end_inset

 will be created in the tmpout directory.
 The 
\begin_inset Quotes eld
\end_inset

t-
\begin_inset Quotes erd
\end_inset

 at the front of the file name is inserted because in the document setup,
 I chose the global prefix for output files as 
\begin_inset Quotes eld
\end_inset

t-
\begin_inset Quotes erd
\end_inset

.
 (Because documents can have different prefixes, it is possible then to
 have several R programs that output files into the same output folder.
 But I rarely do that because I don't want to get too confused about what
 file came from which program.) To insert that in the document, I will write
 a LaTeX statement
\end_layout

\begin_layout LyX-Code

\backslash
includegraphics[width=5in]{tmpout/t-chunkfig}
\end_layout

\begin_layout Standard
Note I don't put 
\begin_inset Quotes eld
\end_inset

.pdf
\begin_inset Quotes erd
\end_inset

 on the end of the file name, LaTeX finds the file named 
\begin_inset Quotes eld
\end_inset

t-chunkfig.pdf
\begin_inset Quotes erd
\end_inset

.
 I could use the LyX pull down Insert -> Graphics as well.
\end_layout

\begin_layout Standard
If the code makes a LaTeX table, I'll have this instead
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

$<<$chunktable, include=F, results=tex$>>=$
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
# R code here
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That creates a file named 
\begin_inset Quotes eld
\end_inset

tmpout/t-chunktable.tex
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout LyX-Code

\backslash
input{tmpout/t-chunktable.tex}
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<RoptionsRestore, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

par(par.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
