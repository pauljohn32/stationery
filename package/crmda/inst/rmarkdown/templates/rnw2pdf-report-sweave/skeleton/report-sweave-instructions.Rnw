%% LyX 2.2.3 created this file.  For more info, see http://www.lyx.org/.
%% Do not edit unless you really know what you are doing.
\documentclass[11pt,letterpaper,english]{scrartcl}
\usepackage{lmodern}
\renewcommand{\sfdefault}{lmss}
\renewcommand{\ttdefault}{lmtt}
\usepackage[T1]{fontenc}
\usepackage[latin9]{inputenc}
\setlength{\parskip}{\medskipamount}
\setlength{\parindent}{0pt}
\usepackage{url}
\usepackage[authoryear]{natbib}

\makeatletter

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% LyX specific LaTeX commands.
\special{papersize=\the\paperwidth,\the\paperheight}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Textclass specific LaTeX commands.
<<echo=F>>=
  if(exists(".orig.enc")) options(encoding = .orig.enc)
@
\providecommand*{\code}[1]{\texttt{#1}}

\@ifundefined{date}{}{\date{}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% User specified LaTeX commands.

% Don't remove next commented line, its needed to fool Sweave
%\usepackage{Sweave}

\usepackage[includehead,includefoot,
lmargin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

\usepackage{multicol}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{xcolor}
\usepackage{dcolumn}
\usepackage{booktabs}

% May be customized for this document
\lstdefinestyle{custom}{
  tabsize=2, 
  breaklines=true, 
  breakatwhitespace=true,
  captionpos=b,
  frame=single,
  framerule=0.2pt,
  framesep=1pt,
  numbersep=5pt,
  showstringspaces=false,
  basicstyle=\normalsize\ttfamily,%
  columns=fixed%,
  \lst@ifdisplaystyle\scriptsize\fi,%
  identifierstyle=,
  keywordstyle=\bfseries,
  commentstyle=\color{darkgreen},
  stringstyle=,
  backgroundcolor=\color[gray]{0.935}
}



\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
\input{theme/preambleFloatCenter.tex}
%% Load Hyperref, don't let LyX do this
\input{theme/reportPreambleSweavel.tex}

\usepackage{fancyvrb}
\fvset{listparameters={\setlength{\topsep}{0em}}}

\makeatother

\usepackage{babel}
\usepackage{listings}
\renewcommand{\lstlistingname}{Listing}

\begin{document}
%% Fill in values of the arguments here, 
%% If blanks are needed, must insert value " ~ "
%% If comma needed inside value, wrap in {}.
%% Delete secondauthor and thirdauthor if not needed
\reportsetup{%
  firstauthor={
    lastname=Author,
    firstname=First, 
    affiliation=CRMDA,
    email=first@ku.edu},
 secondauthor={
    lastname=Author, 
    firstname=Second, 
    affiliation=CRMDA, 
    email=second@ku.edu},
  thirdauthor={
    lastname=Author, 
    firstname=Third, 
    affiliation=i, 
    email=third@ku.edu}, 
  title={Another Very Long Title: With a Possibly Long Subtitle},
  rightlogo={theme/logo.pdf},
}
\reporthdr

% Please leave this chunk
<<echo=F>>=
if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
@

% Please leave this code: In document Latex options:
\fvset{listparameters={\setlength{\topsep}{0em}}}
\SweaveOpts{prefix.string=tmpout/t, split=TRUE, ae=FALSE, height=5, width=6}

<<texcopy, include=FALSE,echo=FALSE>>=
library(crmda)
## If theme directory does not have required images or TeX files
## we need to retrieve them and put them in "theme" directory. 
logos <- c( 
            logoright = "logo.pdf")
texfiles <- c("reportPreambleHeader.tex", 
              "preambleFooter.tex", 
              "preambleFloatCenter.tex",  
              "addressFooter.tex",
              "reportPreambleSweavel.tex")
getFiles(logos, pkg = "crmda")
getFiles(texfiles, pkg = "crmda")
@

% Please leave this chunk
<<Roptions, echo=F, include=F>>=
opts.orig <- options()
options(device = pdf)
options(width=160, prompt=" ", continue="  ")
options(useFancyQuotes = FALSE) 
set.seed(12345)
par.orig <- par(no.readonly=TRUE) 
pjmar <- c(5.1, 5.1, 1.5, 2.1) 
options(SweaveHooks=list(fig=function() par(mar=pjmar, ps=10)))
pdf.options(onefile=FALSE, family="Times", pointsize=10)
@

\section{Introduction}

This is a LaTeX ``noweb'' report generated with the Sweave engine.
We can compare it to the very similar document produced with ``knitr''
(in the companion folder rnw2pdf-report-knitr). 

We suggest you
\begin{enumerate}
\item Compile this document \emph{as is }to test your setup
\item Compare the document with the pdf output so see the impact of the
settings.
\end{enumerate}
Do put your title \& name in the top block.

Don't change the code chunks above or the last chunks below.

For what it is worth, we have found that the knitr framework is not
so easy to customize and manage as Sweave and, if you are planning
to produce a PDF document, it seems likely that the

\section{LyX: Cautions}

The document preamble has manual settings for margins (geometry) as
well as hyperlinks (PDF hyperref). Don't use the LyX pull down menu
to revise them. It is necessary to edit settings in the preamble manually. 

Don't change margins or geometry with Lyx pull down menus. Edit preamble
or config files for that. Repeat \textbf{CAUTION}: Dont change the
page margins or settings for hyperlinks with pull down menus.

\section{What to edit}

\section*{Title and author information}

The first block in the document has the title and author information.

\subsection*{Footer information}

The footer in this document uses data that is provided in a file named
``addressFooter.tex''. After the document is compiled for the first
time, that document should be available in the theme folder.

\subsection*{About the theme folder}

The theme folder should be empty when the initProject() function is
run. 

There is an R code chunk above called ``texcopy''. It will copy
configuration files from the package into the theme folder. After
running this for the first time, those files will not be automatically
replaced by the scripts. 

That means authors are free to edit them to fit their needs.

If the author makes an error in editing a theme file, it is safe to
delete the erroneous file and run the compile script again. That will
copy a fresh version of the theme file into the directory.

\section{Check our documentation}

There are several vignettes distributed with this package. Please
review them.
\begin{enumerate}
\item ``crmda'': the package framework overview
\item ``code\_chunks'': discusses display of code in LaTeX documents
\end{enumerate}

\section{Compile as usual, or with rnw2pdf}

If you are editing these files in LyX, it is sufficient to simply
compile as usual. That will handle the chore of converting a sequence
of document types to arrive at PDF.

If not using LyX, then the author is probably editing the Rnw file.
The Rnw file we provide is produced by LyX, it is an intermediate
step in the document production sequence. A two step compilation procedure
is necessary. First, one must convert the ``Rnw'' file to ``pdf''
(with knit), and then the knitted tex file is compiled into pdf by
pdflatex (or one of the other LaTeX compilers). 

We provide a shell script that can handle this, \code{rnw2pdf.sh}
script (which is included with the skeleton file). It is also possible
to use our R function \code{rnw2pdf}.

\section{Code Chunk Check}

What is the difference between a guide and a report? Simply put, a
report document does not reveal source code and it should not distract
the reader with code or ``raw'' output. A report document might
just as well be typed by hand, if we could be sure all the numbers
would be typed correctly and they could easily revised. In our report
style, the author will not generally insert visible code chunks, so
almost always the chunk will have the flag `include=FALSE` or, if
the chunk is included, the code will not be echoed, but perhaps a
\textbackslash{}LaTeX mark-up table or a figure may be placed into
the document.

Our report documents ALMOST NEVER show ``raw'' R code to readers
and very seldom will they display ``raw'' R output. Almost always,
code chunks will have the flag ``include=F'' set and the document,
when it reveals results, will, again, almost always, display a LaTeX
formatted table that is placed inside a floating table or a figure
that is placed inside a floating figure object.

It is a matter of style and author preference to decide how to include
output within the report document. One approach is to use the chunk
flags that directly display LaTeX output in the document. One must
take special care to assure that the table is fully presentable. The
alternative is to write the nearly presentable table on disk and then
edit by hand to finalize the formats (usually we need to fix column
and row names). 

\subsection*{\protect\code{R} Code Chunks}

We use R \citet{RCore} to do statistical analysis. We'd like to be
as close as possible to the ``reproducible document'' idea. If R
functions can produce perfectly presentable LaTeX output, then we
use it. 

On the other hand, one might write the output files and then manually
insert them into the document. In our documents, we almost always
have the global parameter `split=TRUE`, so that the code input and
output chunks are saved in a directory we call `tmpout`. Another LaTeX
document can insert those chunks. We will demonstrate that here.

\subsubsection*{One document-weaving tip: save something for later.}

In the usual ``weave'' documentation, a user is told to type in
a chunk and then the output plops into the document ``right there''.
I don't use that so often anymore, instead what I do very often is
a trick I learned from Duncan Murdoch in the r-help email list. 

Make sure that the document options are set with \code{split=T}.
This works in LaTeX documents using Sweave or knitr to handle the
code chunks. This causes each chunk's input and output to be saved
to a separate file. This includes graphs and tables. 

If I make a figure, the chunk will look like this

\begin{lstlisting}[style=custom]
 <<chunkfig, eval=F, include=F, echo=F, fig=T>>=
 # R code for figure here
 @
\end{lstlisting}

A file named ``\code{tmpout/t-chunkfig.pdf}'' will be created in
the \code{tmpout} directory. The ``\code{t-}'' at the front of
the file name is inserted because in the document setup, I chose the
global prefix for output files as ``t-''. (Because documents can
have different prefixes, it is possible then to have several R programs
that output files into the same output folder. But I rarely do that
because I don't want to get too confused about what file came from
which program.) To insert that graphic in the document, I will write
a LaTeX statement

\begin{lstlisting}[style=custom]
\includegraphics[width=5in]{tmpout/t-chunkfig}
\end{lstlisting}

Note I don't put ``.pdf'' on the end of the file name, LaTeX finds
the file named ``t-chunkfig.pdf''. I could use the LyX pull down
Insert -> Graphics as well.

If the code makes a LaTeX table, I'll have this instead

\begin{lstlisting}[style=custom]
 <<chunktable, include=F, results=tex>>=
 # R code here
 @
\end{lstlisting}

That creates a file named ``tmpout/t-chunktable.tex''. Then put
that into the document where you want with: 

\begin{lstlisting}[style=custom]
 \input{tmpout/t-chunktable.tex}
\end{lstlisting}

Why do this? Why separate chunk output creation from inclusion in
a document? The simple answer is that I might want to use that chunk
in a different document. If I save a copy in the separate folder,
then it is very convenient to come along later and make a separate
slide show document displaying the same tables and/or figures. Or
I might need to edit the chunk output before inserting it in the document.
 

The automatic ``stick this output in where the chunk is placed''
approach works great with lecture notes and guides because these things
are easy to update and re-run.

\subsection*{Make Nice Looking Tables}

The aim in R code is to generate ``final'' tables that are in LaTeX
format and they are as close as possible to the final, presentable
tables that a client can review in a report. We don't want the report
reader to see ugly output:

<<Rsummary, echo=F>>=
dat <- data.frame(x = rnorm(100), y = rnorm(100))
summary(dat)
@

In R, there are many (many!) packages and functions that can be used
to generate acceptable LaTeX output. The bewildering diversity of
these things is a problem. There are a host of packages that generate
results that are nearly presentable, perhaps requiring only a minor
adjustment of labels.

\subsubsection*{Summary statistics tables}

\subsubsection*{xtable}

Here is an example that uses rockchalk::summarize to gather summary
statistics, which are then reformatted as a LaTeX table by xtable.
Here's an xtable that displays most of the rows in the output from
\code{rockchalk::summarizeNumerics}:

<<tab0, results=hide>>=
tab1 <- rockchalk::summarize(dat)
@

<<tab1, echo=F, results=tex>>=
tab1.x <- xtable::xtable(tab1$numericsfmt)
print(tab1.x, floating = FALSE)
@

To regulate the values in the rows, it is possible to choose explicitly,
but the summarize function in rockchalk was revised to allow uses
to more easily pin-point particular summary values.

It may be that people want the output rotated, so that the variable
names are on the rows and the summary stats are in the columns. That's
possible:

<<tab3, echo=F,results=tex>>=
tab3.x <- xtable::xtable(tab1$numerics)
print(tab3.x, floating = FALSE)
@

The key issue is that the table is not perfectly ready for inclusion
in a report. The row and column names might need beautification. That
is why, realistically, it is generally easier to write those tables
into tex files and revise them by hand, and then use LaTeX ``\textbackslash{}input\{\}''
to include them in the document where appropriate.

\subsubsection*{knitr::kable}

The following is a result from \code{kable} in the \code{knitr}
package:

<<tab4, echo=F,results=tex>>=
tab4.x <- knitr::kable(tab1$numerics, format = "latex")
cat(tab4.x)
@

The \code{kable} function is offered as a simple, usually robust
table writer that will not deal with much ``fancy'' formatting.
.

The \code{kable} function assumes that if the user specifies a title
for the table, then it must mean that the user wants to have the table
set as a floating table object. The same code that made the previous
table is changed just slightly to produce a floating object. Look
around in this document for a table named ``In \code{kable}, I added
the caption argument and got this unexpected float''. (I found this
frustrating because the \code{kable} function does not include documentation
for insertion of a label that can be used for cross referencing.)

<<tab5, echo=F,results=tex>>=
tab5.x <- knitr::kable(tab1$numerics, format = "latex", caption = "In kable, I added the caption argument and got this unexpected float")
cat(tab5.x)
@

I'd rather not have kable insert the table float for me, I'd rather
do it manually, as we can see in Table \ref{tab:kable-output}

\begin{table}[h]
\caption{kable output in a float I created manually\label{tab:kable-output}}

\input{tmpout/t-tab4.tex}
\end{table}

\subsection*{Regression output}

I'll illustrate output from the \code{outreg} function in the \code{rockchalk}
package.

This table may not be perfect by APA standards, but it is certainly
good enough for our reports. If we drop this output into the text,
without inserting it into a float, we obtain the following

<<outreg1, echo=F, results=tex>>=
library(rockchalk)
m1 <- lm(y ~ x, data = dat)
vl <- c("x" = "Excellent Predictor")
or <- outreg(list("First Model" = m1), varLabels = vl, tight = FALSE)
cat(or)
@

One of the truly important differences between Sweave chunks and knitr
chunks is the ``results'' argument. For Sweave, we need ``results='tex'{}''
but for knitr they changed this to ``results='asis'{}''.

It is possible to specify a table title and generate a floating object
from outreg, but I don't usually do that. I usually have the argument
float = FALSE because I want to create the floating object myself
and place it where I like. That is illustrated in Table \ref{tab:A-Regression}.

\begin{table}
\caption{A Regression from \protect\code{outreg}\label{tab:A-Regression}}

\input{tmpout/t-outreg1.tex}
\end{table}

There are many other regression-table-making functions available today.
I made some lecture notes about it for the R summer workshops that
we offer at KU (\url{http://pj.freefaculty.org/guides/Rcourse/regression-tables-1}). 

\subsection*{Structural equation models}

In the good looking table department, we also need to display structural
equation models. This has been a long term objective in CRMDA and
it is, for the most part, a solved problem. 

In the \code{kutils} package, we made a function \code{semTable}
that is intended to help. Please see Table \ref{tab:A-Confirmatory-Factor}. 

<<include=F>>=
library(kutils)
require(lavaan)
@

<<cfa1, echo=F, include=F,results=tex>>=
HS.model <- 'visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9'
output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
cfa1 <- semTable(output1, fits = "rmsea", paramSets = c("loadings", "latentvariances"), type = "latex")
cat(cfa1)
@

\begin{table}
\caption{A Confirmatory Factor Analysis Table\label{tab:A-Confirmatory-Factor}}

\input{tmpout/t-cfa1.tex}
\end{table}

\section{Session Information}

Leave the code chunks below. But the visible words and section name
should be removed. Session Information is usually not written into
a report, but an output file is created by the following pieces.

<<session, include=F>>=
zz <- "report-instructions.Rout"
capture.output(sessionInfo(), file = zz, append = FALSE)
if (!is.null(warnings())){
    capture.output(warnings(), file = zz, append = TRUE)
}
@

<<RoptionsRestore, echo=F, include=F>>=
## Don't delete this. It puts the interactive session options
## back the way they were. If this is compiled within a session
## it is vital to do this.
options(opts.orig)
par(par.orig)
@

\bibliographystyle{apalike2}
\bibliography{theme/mlm}

\end{document}
