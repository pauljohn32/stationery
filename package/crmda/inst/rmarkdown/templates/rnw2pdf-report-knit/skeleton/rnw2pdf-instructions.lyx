#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass scrartcl
\begin_preamble
\usepackage[includehead,includefoot,
margin=1in,
rmargin=1in,
tmargin=0.75in,
bmargin=1.0in,
headheight=0pt,
headsep=0pt,
marginparwidth=0pt,
footskip=1.5\baselineskip,
]{geometry}

\usepackage{multicol}
\usepackage{listings}
\usepackage{graphicx}
\usepackage{xcolor}
\usepackage[yyyymmdd,hhmmss]{datetime}


\lstset{tabsize=2, breaklines=true, 
  breakatwhitespace=true,
  %language=R,
  captionpos=b,
  frame=single,
  framerule=0.2pt,
  framesep=1pt,
  % numbers=left,% not in reports
  % numberstyle=\tiny,%not in reports
  numbersep=5pt,
  showstringspaces=false,
  basicstyle=\footnotesize,
  identifierstyle=,
  keywordstyle=\bfseries,
  commentstyle=\color{darkgreen},
  stringstyle=,
  backgroundcolor=\color[gray]{0.935}
}


\usepackage{dcolumn}
\usepackage{booktabs}
\usepackage{multicol}

%% PJ 20161110
%% I want to use listings in the document and I want nice/same as knitr.
%% Does knitr provide all of these settings for other listing uses outside
%% weaved part?
\usepackage{fancyvrb}
\fvset{listparameters={\setlength{\topsep}{0em}}}
\usepackage{listings}
\def\Sweavesize{\normalsize} 
\def\Rcolor{\color{black}} 
\def\Rbackground{\color[gray]{0.95}}
\providecommand{\Rcolor}{\color[rgb]{0, 0.5, 0.5}}
%%\providecommand{\Routcolor}{\color[rgb]{0.461, 0.039, 0.102}}
\providecommand{\Routcolor}{\color[rgb]{1.0, 0.0, 0.0}}
\providecommand{\Rcommentcolor}{\color[rgb]{0.101, 0.043, 0.432}}

\providecommand{\Rbackground}{\color[gray]{0.95}}
\providecommand{\Routbackground}{\color[gray]{0.80}}
% Can specify \color[gray]{1} for white background or just \color{white}


\lstdefinestyle{Rstyle}{fancyvrb=false,
                        frame=none,
                        escapechar=`,
                        language=R,%
                        basicstyle={\Rcolor\Sweavesize},%
                        backgroundcolor=\Rbackground,%
                        showstringspaces=false,%
                        keywordstyle=\Rcolor,%
                        commentstyle={\Rcommentcolor\ttfamily\itshape},%
                        literate={<<-}{{$\twoheadleftarrow$}}2{~}{{$\sim$}}1{<=}{{$\leq$}}2{>=}{{$\geq$}}2{^}{{$^{\scriptstyle\wedge}$}}1,%
                        alsoother={$},%
                        alsoletter={.<-},%
                        otherkeywords={!,!=,~,$,*,\&,\%/\%,\%*\%,\%\%,<-,<<-,/},%
                        escapeinside={(*}{*)}}%

\lstset{tabsize=2, breaklines=true, style=Rstyle}



\input{theme/reportPreambleHeader.tex}
\input{theme/preambleFooter.tex}
\input{theme/preambleFloatCenter.tex}
%% Load Hyperref, don't let LyX do this
\input{theme/preambleHyperref.tex}
\input{theme/reportPreambleKnitr.tex}
\end_preamble
\use_default_options false
\begin_modules
logicalmkup
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding global
\font_roman "lmodern" "default"
\font_sans "lmss" "default"
\font_typewriter "lmtt" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\branch R
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset ERT
status open

\begin_layout Plain Layout

%% Fill in values of the arguments here, 
\end_layout

\begin_layout Plain Layout

%% If blanks are needed, must insert value " ~ "
\end_layout

\begin_layout Plain Layout

%% If comma needed inside value, wrap in {}.
\end_layout

\begin_layout Plain Layout

%% Delete secondauthor and thirdauthor if not needed
\end_layout

\begin_layout Plain Layout


\backslash
reportsetup{%
\end_layout

\begin_layout Plain Layout

  firstauthor={
\end_layout

\begin_layout Plain Layout

    lastname=Sullivan,
\end_layout

\begin_layout Plain Layout

    firstname=Meghan, 
\end_layout

\begin_layout Plain Layout

    affiliation=CRMDA,
\end_layout

\begin_layout Plain Layout

    email=first@ku.edu},
\end_layout

\begin_layout Plain Layout

 secondauthor={
\end_layout

\begin_layout Plain Layout

    lastname=Author, 
\end_layout

\begin_layout Plain Layout

    firstname=Second, 
\end_layout

\begin_layout Plain Layout

    affiliation=CRMDA, 
\end_layout

\begin_layout Plain Layout

    email=second@ku.edu},
\end_layout

\begin_layout Plain Layout

  thirdauthor={
\end_layout

\begin_layout Plain Layout

    lastname=Author, 
\end_layout

\begin_layout Plain Layout

    firstname=Third, 
\end_layout

\begin_layout Plain Layout

    affiliation=i, 
\end_layout

\begin_layout Plain Layout

    email=third@ku.edu}, 
\end_layout

\begin_layout Plain Layout

  title={Another Very Long Title: With a Possibly Long Subtitle},
\end_layout

\begin_layout Plain Layout

  rightlogo={theme/CRMDAlogo.pdf},
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
reporthdr
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%% Specify fully the left and right sides of footer, 3 lines
\end_layout

\begin_layout Plain Layout

%% If blanks are needed, must insert value " ~ "
\end_layout

\begin_layout Plain Layout


\backslash
footersetup{
\end_layout

\begin_layout Plain Layout

  leftside={
\end_layout

\begin_layout Plain Layout

    lone=1425 Jayhawk Blvd., 
\end_layout

\begin_layout Plain Layout

    ltwo={Watson Library, Suite 470}, 
\end_layout

\begin_layout Plain Layout

    lthree={Lawrence, KS 66045-7594}},
\end_layout

\begin_layout Plain Layout

  rightside={
\end_layout

\begin_layout Plain Layout

    rone=
\backslash
url{https://crmda.ku.edu},
\end_layout

\begin_layout Plain Layout

    rtwo=
\backslash
href{mailto:crmda@ku.edu}{crmda@ku.edu},
\end_layout

\begin_layout Plain Layout

    rthree=Phone: 785-864-3353}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
guideftr
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=FALSE, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

if(!dir.exists("tmpout"))dir.create("tmpout", recursive = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<knitr10,include=FALSE,echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(knitr)
\end_layout

\begin_layout Plain Layout

opts_chunk$set(fig.path='tmpout/t-', split=TRUE, ae=FALSE, comment=NA,
\end_layout

\begin_layout Plain Layout

               fig.height=5, fig.width=6)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang american
\begin_inset ERT
status open

\begin_layout Plain Layout

<<texcopy, include=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(crmda)
\end_layout

\begin_layout Plain Layout

## If theme directory does not have required images or TeX files
\end_layout

\begin_layout Plain Layout

## we need to retrieve them and put them in "theme" directory.
 
\end_layout

\begin_layout Plain Layout

logos <- c(logoright = "CRMDAlogo-vert.pdf")
\end_layout

\begin_layout Plain Layout

texfiles <- c("reportPreambleHeader.tex", 
\end_layout

\begin_layout Plain Layout

              "preambleFooter.tex", 
\end_layout

\begin_layout Plain Layout

              "preambleFloatCenter.tex",  
\end_layout

\begin_layout Plain Layout

              "preambleHyperref.tex",
\end_layout

\begin_layout Plain Layout

              "reportPreambleKnitr.tex")
\end_layout

\begin_layout Plain Layout

getFiles(logos, pkg = "crmda")
\end_layout

\begin_layout Plain Layout

getFiles(texfiles, pkg = "crmda")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<Roptions, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

opts.orig <- options()
\end_layout

\begin_layout Plain Layout

options(device = pdf)
\end_layout

\begin_layout Plain Layout

options(width=160, prompt=" ", continue="  ")
\end_layout

\begin_layout Plain Layout

options(useFancyQuotes = FALSE) 
\end_layout

\begin_layout Plain Layout

set.seed(12345)
\end_layout

\begin_layout Plain Layout

pdf.options(onefile=FALSE, family="Times", pointsize=10)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a LaTeX 
\begin_inset Quotes eld
\end_inset

noweb
\begin_inset Quotes erd
\end_inset

 report generated with the knitr engine.
 We had a working document using Sweave and the listings class (via the
 Sweavel LaTeX package).
 This is migrated from that to use knitr.
 Some elements are still not well integrated, it is very tough for me to
 be sure which argument in the preamble are actually relevant to knitr and
 which are relevant to listings by itself.
\end_layout

\begin_layout Standard
The syntax for knitr code chunks is only slightly different than the syntax
 for Sweave chunks.
 Many of the options are identical.
 The syntax for a code chunk in both cases is like so
\end_layout

\begin_layout LyX-Code
\begin_inset ERT
status open

\begin_layout Plain Layout

$<<$chunkname, eval=TorF, include=TorF, echo=TorF$>>=$
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
# R code here
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where by 
\begin_inset Quotes eld
\end_inset


\begin_inset Flex Code
status open

\begin_layout Plain Layout
TorF
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

 I mean you can choose either T or F.
 These arguments are allowed in either knitr or Sweave, they are the ones
 I use most often.
 Briefly:
\end_layout

\begin_layout Description
1.
\begin_inset space ~
\end_inset

echo: when the chunk is processed, the R code will be displayed along with
 the output
\end_layout

\begin_layout Description
2.
\begin_inset space ~
\end_inset

include: the chunk is evaluated, but neither the echo nor the results are
 displayed
\end_layout

\begin_layout Description
3.
\begin_inset space ~
\end_inset

eval: if F, the chunk is not sent to the R session, but it is checked for
 correctness of code at compile time.
\end_layout

\begin_layout Standard
The difference with knitr is partly due to a larger set of legal flags but
 also because knitr provides different functions to handle the document
 processing.
 One benefit of knitr is that, at least in theory, it can be used to write
 about other kinds of programs.
 I've used it to write about the BASH shell, for example.
 
\end_layout

\begin_layout Standard

\series bold
CAUTION
\series default
: This template document has some special features in the preamble.
 Most importantly, it has margins that are set.
 The LyX graphical menu (Document -> Settings -> margins) will break these
 defaults.
 So don't change the page margins or the pagestyle.
 Other than that, I don't know of any settings that are fatal.
\end_layout

\begin_layout Standard
Over the years, I have benefitted a great deal from the 
\begin_inset Quotes eld
\end_inset

automatic document with integrated results
\begin_inset Quotes erd
\end_inset

 from Sweave.
 I have found this most beneficial in the preparation of course notes and
 slides.
 
\end_layout

\begin_layout Standard
I do not find it quite so beneficial in the preparation of reports.
 Here is the main issue.
 The 
\begin_inset Quotes eld
\end_inset

automatic
\begin_inset Quotes erd
\end_inset

 
\begin_inset Quotes eld
\end_inset

self-documenting
\begin_inset Quotes erd
\end_inset

 report is almost never exactly correct.
 It requires some 
\begin_inset Quotes eld
\end_inset

finger painting
\begin_inset Quotes erd
\end_inset

.
 Perhaps that would not be true in the perfect world, if we were perfect
 programmers, but I don't live in a perfect world.
 In that case, I am willing to settle for a very good second best alternative.
 I have learned to export result files from R which can be included in documents
 easily, so the documents are easily updated and revised.
 They may not be completely automatic because I leave open the possibility
 that I might need to adjust a figure's size or a part of a table's markup.
\end_layout

\begin_layout Standard
The magic bullet in that is the 
\begin_inset Quotes eld
\end_inset

split
\begin_inset Quotes erd
\end_inset

 option for Sweave, which knitr for LaTeX also supports.
 If split=T, then the individual code chunks and their results are saved
 in separate files.
 Here we save them in a directory called 
\begin_inset Quotes eld
\end_inset

tmpout
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
What is the difference between a guide and a report? Simply put, a report
 document does not reveal source code and it should not distract the reader
 with code.
 A report document might just as well be typed by hand, if we could be sure
 all the numbers would be typed correctly and they could easily revised.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<m1, include=F>>=
\end_layout

\begin_layout Plain Layout

dat <- data.frame(x = rnorm(100), y = rnorm(100))
\end_layout

\begin_layout Plain Layout

m1 <- lm(y ~ x, data = dat)
\end_layout

\begin_layout Plain Layout

summary(m1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In a report, we do not usually have R output in the raw form
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-m1.tex}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That is output from knitr's code decoration setup, incidentally.
 I'd rather not have the color coded R code and I don't want light gray
 output.
 Those are settings we need to fix before we go much further down this road.
\end_layout

\begin_layout Standard
In a report, we do not want R code or output, we want a professional-looking
 table.
 This table may not be perfect by APA standards, but it is certainly good
 enough for our reports.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<outreg1, echo=F, results='asis'>>=
\end_layout

\begin_layout Plain Layout

library(rockchalk)
\end_layout

\begin_layout Plain Layout

vl <- c("x" = "Excellent Predictor")
\end_layout

\begin_layout Plain Layout

or <- outreg(list("First Model" = m1), varLabels = vl, tight = FALSE)
\end_layout

\begin_layout Plain Layout

cat(or)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is an unsolved style problem.
 This is more relevant to guide documents, which do show R code, than it
 is to reports, which generally do not.
 I have not been able to exactly match the visual appearance of R code and
 output from knitr with the output of the LaTeX listings class.
 I wish that listings objects that are not produced from knitted chunks
 would look same.
 The following is output from LaTeX Listings.
 Note: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

x <- rnorm(100)
\end_layout

\begin_layout Plain Layout

y <- rpois(100, lambda = 2)
\end_layout

\begin_layout Plain Layout

plot(y ~ x)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ah, I see it is not the same because I did not get my listing settings in
 my preamble exactly the same as what knitr uses.
 How to fix? I wish I could adjust the knitr settings so I don't hate the
 output, then I want to change the listings settings so they are similar.
\end_layout

\begin_layout Standard
Maybe I can get a GRA to fix.
\end_layout

\begin_layout Standard
If I put in another chunk, maybe I will see a pattern in the LaTeX code.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

summary(dat)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the kutils package, we made a function semTable that is intended to help
 with nice looking.
 Usually, we want a bigger table in a floating element.
 Please see Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:A-Confirmatory-Factor"

\end_inset

.
 In the preamble of this document, I have some boilerplate code that causes
 content in floating tables and figures to be centered automatically.
 This looks nice!
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<include=F>>=
\end_layout

\begin_layout Plain Layout

library(kutils)
\end_layout

\begin_layout Plain Layout

require(lavaan)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cfa1, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

HS.model <- 'visual  =~ x1 + x2 + x3
\end_layout

\begin_layout Plain Layout

textual =~ x4 + x5 + x6
\end_layout

\begin_layout Plain Layout

speed   =~ x7 + x8 + x9'
\end_layout

\begin_layout Plain Layout

output1 <- cfa(HS.model, data = HolzingerSwineford1939, std.lv = TRUE)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cfa3, echo=F, include=F,results='asis'>>=
\end_layout

\begin_layout Plain Layout

cfa1 <- semTable(output1, fits = "rmsea", paramSets = c("loadings", "latentvaria
nces"), type = "latex")
\end_layout

\begin_layout Plain Layout

cat(cfa1)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A Confirmatory Factor Analysis Table
\begin_inset CommandInset label
LatexCommand label
name "tab:A-Confirmatory-Factor"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
input{tmpout/t-cfa3.tex}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<RoptionsRestore, echo=F, include=F>>=
\end_layout

\begin_layout Plain Layout

## Don't delete this.
 It puts the interactive session options
\end_layout

\begin_layout Plain Layout

## back the way they were.
 If this is compiled within a session
\end_layout

\begin_layout Plain Layout

## it is vital to do this.
\end_layout

\begin_layout Plain Layout

options(opts.orig)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
